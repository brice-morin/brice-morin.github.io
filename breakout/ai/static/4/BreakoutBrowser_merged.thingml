object Canvas
object CanvasContext
thing DisplayBrowser includes Display , ControllerMsgs {
	provided port vctrl {
		sends velocitydydx sends velocityval279 sends positiony sends positionxval280
	}
	readonly property SCALE : UInt8 = 5
	property XFRAMESIZE : UInt16
	property YFRAMESIZE : UInt16
	property Buffer : CanvasContext
	property BufferCanvas : Canvas
	property Display : CanvasContext
	function initDisplay(xsize : UInt8, ysize : UInt8) do
		XFRAMESIZE = xsize
		YFRAMESIZE = ysize
		`
      document.body.style.backgroundColor = "gray";

      /* Create buffer canvas */
      var buffer = document.createElement("canvas");
      buffer.setAttribute("width", ` & XFRAMESIZE & `);
      buffer.setAttribute("height", ` & YFRAMESIZE & `);
      buffer.style.imageRendering = "pixelated";
      ` & BufferCanvas & ` = buffer;

      var bufferCtx = buffer.getContext("2d");
      bufferCtx.imageSmoothingEnabled = false;
      bufferCtx.mozImageSmoothingEnabled = false;
      bufferCtx.webkitImageSmoothingEnabled = false;
      bufferCtx.msImageSmoothingEnabled = false;
      ` & Buffer & ` = bufferCtx;

      /* Create the display canvas */
      var display = document.createElement("canvas");
      display.setAttribute("width", ` & XFRAMESIZE * SCALE & `);
      display.setAttribute("height", ` & YFRAMESIZE * SCALE & `);

      var displayCtx = display.getContext("2d");
      displayCtx.imageSmoothingEnabled = false;
      displayCtx.mozImageSmoothingEnabled = false;
      displayCtx.webkitImageSmoothingEnabled = false;
      displayCtx.msImageSmoothingEnabled = false;

      ` & Display & ` = displayCtx;

      // Put it in the middle of the window
      display.style.position = "absolute";
      display.style.left = "50%";
      display.style.top = "50%";
      display.style.marginLeft = ` & -XFRAMESIZE / 2 * SCALE & `+"px";
      display.style.marginTop = ` & -YFRAMESIZE / 2 * SCALE & `+"px";
      display.style.cursor = "none";
      document.body.appendChild(display);

      // Add mouse over events
      display.addEventListener("mousemove", (e) => {
        var mouseX = e.offsetX/(` & XFRAMESIZE * SCALE & `); // [0,1]

        // TODO: Some hardcoded numbers
        var dispX = mouseX*10240; //XMAX
        var posX = (dispX-5120)*200/8406;
        posX = Math.max(-100, Math.min(100, posX));

        `
		do
			vctrl!positiony(0x20, 0)
			vctrl!positionxval280(`posX` as Int16, 0xD7, 0xD9)
		end
	`
      });
    `
		clearScreen()
	`
      document.addEventListener("keydown", (e) => {
        if (e.key == "ArrowLeft") {
          `
		do
			vctrl!velocitydydx(0, -8, 0x59)
			vctrl!velocityval279(0x32, 0xE5)
		end
	`
        } else if (e.key == "ArrowRight") {
          `
		do
			vctrl!velocityval279(0xC9, 0xDF)
			vctrl!velocitydydx(0, 8, 0xE5)
		end
	`
        }
      });
      document.addEventListener("keyup", (e) => {
        if (e.key == "ArrowLeft" || e.key == "ArrowRight") {
          `
		do
			vctrl!velocityval279(0x1E, 0xCE)
			vctrl!velocitydydx(0, 0, 0x1B)
		end
	`
        }
      });
    `
	`
      window.setPadPosition = (x) => { //[-100, 100]
        `
		do
			vctrl!positiony(0x2F, 0)
			vctrl!positionxval280(`x` as Int16, 0x98, 0xEB)
		end
	`
      };
    `
	end
	function destroyDisplay() do
	end
	function updateDisplay() do
		`` & Display & `.drawImage(` & BufferCanvas & `, 0, 0, ` & XFRAMESIZE * SCALE & `, ` & YFRAMESIZE * SCALE & `);`
	end
	function clearScreen() do
		setColor(0, 0, 0)
		fillRect(0, 0, XFRAMESIZE, YFRAMESIZE)
		updateDisplay()
	end
	function setColor(r : UInt8, g : UInt8, b : UInt8) do
		`
      ` & Buffer & `.strokeStyle = "rgb("+` & r & `+", "+` & g & `+", "+` & b & `+")";
      ` & Buffer & `.fillStyle = "rgb("+` & r & `+", "+` & g & `+", "+` & b & `+")";
    `
	end
	function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`
      var xr = Math.floor(` & x & `);
      var yr = Math.floor(` & y & `);
      var wr = Math.floor(` & width & `);
      var hr = Math.floor(` & height & `);
      ` & Buffer & `.fillRect(xr, yr, wr, 1);
      ` & Buffer & `.fillRect(xr, yr+hr-1, wr, 1);
      ` & Buffer & `.fillRect(xr, yr, 1, hr);
      ` & Buffer & `.fillRect(xr+wr-1, yr, 1, hr);
    `
	end
	function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`
      var xr = Math.floor(` & x & `);
      var yr = Math.floor(` & y & `);
      var wr = Math.floor(` & width & `);
      var hr = Math.floor(` & height & `);
      ` & Buffer & `.fillRect(xr, yr, wr, hr);
    `
	end
}
thing BreakoutGameBrowser includes DefaultBreakoutGame {
	function quit() println "done!"
	function timestamp() : UInt32 return `Date.now()` as UInt32
	function usedMemory() : UInt32 do
		return -1
	end
}
thing fragment TimerMsgs @stl {
	message timer_cancel(val287 : Byte @noise, val265 : Byte @noise, id : UInt8)
	message timer_start(val288 : Byte @noise, id : UInt8, time : UInt16, val264 : Byte @noise)
	message timer_timeout(id : UInt8, val289 : Byte @noise, val266 : Byte @noise)
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
object JSArray
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray
	function startTimer(id : UInt8, delay : UInt16) do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(id, 0xAF, 0x8F)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id, 0xDF, 0x86)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess
object TimerMap @go_type `map[uint8]*time.Timer`
thing fragment DisplayMsgs {
	message displayReady_(val302 : Byte @noise)
	message drawRect_(val294 : Byte @noise)
	message fillRectyxwidthval271height(x : UInt8, width : UInt8, height : UInt8, val271 : Byte @noise, val299 : Byte @noise, y : UInt8)
	message update_(val310 : Byte @noise)
	message setColorbval268g(b : UInt8, val268 : Byte @noise, val305 : Byte @noise, g : UInt8)
	message fillRect_(val298 : Byte @noise)
	message displayErrorval278(val307 : Byte @noise, val278 : Byte @noise)
	message displayError_(val306 : Byte @noise)
	message updateval276(val311 : Byte @noise, val276 : Byte @noise)
	message drawThingMLyx(val313 : Byte @noise, y : UInt8, x : UInt8)
	message clearval267(val291 : Byte @noise, val267 : Byte @noise)
	message drawThingMLval273(val273 : Byte @noise, val312 : Byte @noise)
	message createysizeval274(ysize : UInt8, val274 : Byte @noise, val301 : Byte @noise)
	message drawRectwidthheightval270xy(val270 : Byte @noise, x : UInt8, width : UInt8, val295 : Byte @noise, y : UInt8, height : UInt8)
	message destroyval275(val309 : Byte @noise, val275 : Byte @noise)
	message createxsize(xsize : UInt8, val300 : Byte @noise)
	message displayReadyval277(val277 : Byte @noise, val303 : Byte @noise)
	message setBGColorrg(r : UInt8, g : UInt8, val296 : Byte @noise)
	message drawIntegerscaleyx(val292 : Byte @noise, x : UInt8, y : UInt8, scale : UInt8)
	message setBGColorval269b(val269 : Byte @noise, b : UInt8, val297 : Byte @noise)
	message setColorr(val304 : Byte @noise, r : UInt8)
	message destroy_(val308 : Byte @noise)
	message drawIntegerval272digitsv(val272 : Byte @noise, val293 : Byte @noise, digits : UInt8, v : Int16)
	message clear_(val290 : Byte @noise)
}
thing fragment Display includes DisplayMsgs {
	provided port display {
		sends displayReady_ sends displayReadyval277 sends displayError_ sends displayErrorval278 receives createxsize receives createysizeval274 receives destroy_ receives destroyval275 receives update_ receives updateval276 receives clear_ receives clearval267 receives setColorr receives setColorbval268g receives setBGColorrg receives setBGColorval269b receives drawRect_ receives drawRectwidthheightval270xy receives fillRect_ receives fillRectyxwidthval271height receives drawIntegerscaleyx receives drawIntegerval272digitsv receives drawThingMLval273 receives drawThingMLyx
	}
	property bg_r : UInt8 = 0
	property bg_g : UInt8 = 0
	property bg_b : UInt8 = 0
	property fg_r : UInt8 = 0
	property fg_g : UInt8 = 0
	property fg_b : UInt8 = 0
	abstract function initDisplay(xsize : UInt8, ysize : UInt8)

	abstract function destroyDisplay()

	abstract function updateDisplay()

	abstract function clearScreen() @abstract `true`

	abstract function setColor(r : UInt8, g : UInt8, b : UInt8)

	abstract function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)

	abstract function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)

	function drawDigit(x : UInt8, y : UInt8, d : UInt8, size : UInt8) do
		if (d < 1) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 2) do
			fillRect(x + size, y, size, 5 * size)
		end
		else if (d < 3) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 4) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x + size, y + 2 * size, 2 * size, size)
		end
		else if (d < 5) do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 6) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 7) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 5 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 8) do
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 9) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
		else do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
	end
	function drawThingML(px : Int16, py : Int16) do
		setColor(255, 255, 255)
		fillRect(px, py, 108, 13)
		var x : Int16 = px + 1
		var y : Int16 = py + 1
		setColor(80, 80, 80)
		fillRect(x + 0, y + 0, 12, 2)
		fillRect(x + 5, y + 0, 2, 11)
		fillRect(x + 18, y + 0, 2, 11)
		fillRect(x + 27, y + 0, 2, 11)
		fillRect(x + 18, y + 5, 11, 2)
		fillRect(x + 36, y + 0, 2, 11)
		fillRect(x + 44, y + 0, 2, 11)
		fillRect(x + 46, y + 1, 1, 3)
		fillRect(x + 47, y + 2, 1, 3)
		fillRect(x + 48, y + 3, 1, 3)
		fillRect(x + 49, y + 4, 1, 3)
		fillRect(x + 50, y + 5, 1, 3)
		fillRect(x + 51, y + 6, 1, 3)
		fillRect(x + 52, y + 7, 1, 3)
		fillRect(x + 53, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 69, y + 5, 5, 2)
		fillRect(x + 72, y + 7, 2, 2)
		setColor(232, 141, 10)
		fillRect(x + 80, y + 0, 11, 2)
		fillRect(x + 80, y + 0, 2, 11)
		fillRect(x + 85, y + 0, 2, 11)
		fillRect(x + 89, y + 0, 2, 11)
		fillRect(x + 95, y + 0, 2, 11)
		fillRect(x + 95, y + 9, 11, 2)
	end
	function drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8) do
		clearInteger(x, y, digits, scale)
		var val : Int16 = v
		var d : UInt8 = digits
		while (d > 0) do
			drawDigit(x + (d - 1) * 4 * scale, y, val % 10, scale)
			val = val / 10
			d = d - 1
		end
	end
	function clearInteger(x : UInt8, y : UInt8, digits : UInt8, scale : UInt8) do
		setColor(bg_r, bg_g, bg_b)
		fillRect(x, y, (digits * 4 - 1) * scale, 5 * scale)
		setColor(fg_r, fg_g, fg_b)
	end
	statechart SC init Wait {
		state Wait {
			property display_create_xsize : UInt8
			property display_create_ysize : UInt8
			property display_create_val274 : Byte
			property received_display_createxsize : Boolean
			property received_display_createysizeval274 : Boolean
			internal
			event e : display?createxsize
			guard not received_display_createysizeval274
			action do
				received_display_createxsize = true
				display_create_xsize = e.xsize
			end
			internal
			event e : display?createysizeval274
			guard not received_display_createxsize
			action do
				received_display_createysizeval274 = true
				display_create_ysize = e.ysize
				display_create_val274 = e.val274
			end
			transition -> Running
			event e : display?createxsize
			guard received_display_createysizeval274
			action do
				display_create_xsize = e.xsize
				initDisplay(e.xsize, display_create_ysize)
				received_display_createxsize = false
				received_display_createysizeval274 = false
			end
			transition -> Running
			event e : display?createysizeval274
			guard received_display_createxsize
			action do
				display_create_ysize = e.ysize
				display_create_val274 = e.val274
				initDisplay(display_create_xsize, e.ysize)
				received_display_createysizeval274 = false
				received_display_createxsize = false
			end
		}
		state Running {
			property display_setColor_r : UInt8
			property display_setColor_b : UInt8
			property display_setColor_val268 : Byte
			property display_setColor_g : UInt8
			property received_display_setColorr : Boolean
			property received_display_setColorbval268g : Boolean
			property display_setBGColor_r : UInt8
			property display_setBGColor_g : UInt8
			property display_setBGColor_val269 : Byte
			property display_setBGColor_b : UInt8
			property received_display_setBGColorrg : Boolean
			property received_display_setBGColorval269b : Boolean
			property display_clear_val267 : Byte
			property received_display_clear_ : Boolean
			property received_display_clearval267 : Boolean
			property display_drawRect_width : UInt8
			property display_drawRect_height : UInt8
			property display_drawRect_val270 : Byte
			property display_drawRect_x : UInt8
			property display_drawRect_y : UInt8
			property received_display_drawRect_ : Boolean
			property received_display_drawRectwidthheightval270xy : Boolean
			property display_fillRect_y : UInt8
			property display_fillRect_x : UInt8
			property display_fillRect_width : UInt8
			property display_fillRect_val271 : Byte
			property display_fillRect_height : UInt8
			property received_display_fillRect_ : Boolean
			property received_display_fillRectyxwidthval271height : Boolean
			property display_update_val276 : Byte
			property received_display_update_ : Boolean
			property received_display_updateval276 : Boolean
			property display_drawInteger_scale : UInt8
			property display_drawInteger_y : UInt8
			property display_drawInteger_x : UInt8
			property display_drawInteger_val272 : Byte
			property display_drawInteger_digits : UInt8
			property display_drawInteger_v : Int16
			property received_display_drawIntegerscaleyx : Boolean
			property received_display_drawIntegerval272digitsv : Boolean
			property display_drawThingML_val273 : Byte
			property display_drawThingML_y : UInt8
			property display_drawThingML_x : UInt8
			property received_display_drawThingMLval273 : Boolean
			property received_display_drawThingMLyx : Boolean
			property display_destroy_val275 : Byte
			property received_display_destroy_ : Boolean
			property received_display_destroyval275 : Boolean
			on entry do
				do
					display!displayReadyval277(0xA8, 0xCC)
					display!displayReady_(0x80)
				end
			end
			internal
			event e : display?setColorr
			action do
				received_display_setColorr = true
				display_setColor_r = e.r
				if (received_display_setColorbval268g) do
					do
						fg_r = display_setColor_r
						fg_g = display_setColor_g
						fg_b = display_setColor_b
						setColor(display_setColor_r, display_setColor_g, display_setColor_b)
					end
					do
						received_display_setColorr = false
						received_display_setColorbval268g = false
					end
				end
			end
			internal
			event e : display?setColorbval268g
			action do
				received_display_setColorbval268g = true
				display_setColor_b = e.b
				display_setColor_val268 = e.val268
				display_setColor_g = e.g
				if (received_display_setColorr) do
					do
						fg_r = display_setColor_r
						fg_g = display_setColor_g
						fg_b = display_setColor_b
						setColor(display_setColor_r, display_setColor_g, display_setColor_b)
					end
					do
						received_display_setColorbval268g = false
						received_display_setColorr = false
					end
				end
			end
			internal
			event e : display?setBGColorrg
			action do
				received_display_setBGColorrg = true
				display_setBGColor_r = e.r
				display_setBGColor_g = e.g
				if (received_display_setBGColorval269b) do
					do
						bg_r = display_setBGColor_r
						bg_g = display_setBGColor_g
						bg_b = display_setBGColor_b
					end
					do
						received_display_setBGColorrg = false
						received_display_setBGColorval269b = false
					end
				end
			end
			internal
			event e : display?setBGColorval269b
			action do
				received_display_setBGColorval269b = true
				display_setBGColor_val269 = e.val269
				display_setBGColor_b = e.b
				if (received_display_setBGColorrg) do
					do
						bg_r = display_setBGColor_r
						bg_g = display_setBGColor_g
						bg_b = display_setBGColor_b
					end
					do
						received_display_setBGColorval269b = false
						received_display_setBGColorrg = false
					end
				end
			end
			internal
			event e : display?clear_
			action do
				received_display_clear_ = true
				if (received_display_clearval267) do
					clearScreen()
					do
						received_display_clear_ = false
						received_display_clearval267 = false
					end
				end
			end
			internal
			event e : display?clearval267
			action do
				received_display_clearval267 = true
				display_clear_val267 = e.val267
				if (received_display_clear_) do
					clearScreen()
					do
						received_display_clearval267 = false
						received_display_clear_ = false
					end
				end
			end
			internal
			event e : display?drawRect_
			action do
				received_display_drawRect_ = true
				if (received_display_drawRectwidthheightval270xy) do
					drawRect(display_drawRect_x, display_drawRect_y, display_drawRect_width, display_drawRect_height)
					do
						received_display_drawRect_ = false
						received_display_drawRectwidthheightval270xy = false
					end
				end
			end
			internal
			event e : display?drawRectwidthheightval270xy
			action do
				received_display_drawRectwidthheightval270xy = true
				display_drawRect_width = e.width
				display_drawRect_height = e.height
				display_drawRect_val270 = e.val270
				display_drawRect_x = e.x
				display_drawRect_y = e.y
				if (received_display_drawRect_) do
					drawRect(display_drawRect_x, display_drawRect_y, display_drawRect_width, display_drawRect_height)
					do
						received_display_drawRectwidthheightval270xy = false
						received_display_drawRect_ = false
					end
				end
			end
			internal
			event e : display?fillRect_
			action do
				received_display_fillRect_ = true
				if (received_display_fillRectyxwidthval271height) do
					fillRect(display_fillRect_x, display_fillRect_y, display_fillRect_width, display_fillRect_height)
					do
						received_display_fillRect_ = false
						received_display_fillRectyxwidthval271height = false
					end
				end
			end
			internal
			event e : display?fillRectyxwidthval271height
			action do
				received_display_fillRectyxwidthval271height = true
				display_fillRect_y = e.y
				display_fillRect_x = e.x
				display_fillRect_width = e.width
				display_fillRect_val271 = e.val271
				display_fillRect_height = e.height
				if (received_display_fillRect_) do
					fillRect(display_fillRect_x, display_fillRect_y, display_fillRect_width, display_fillRect_height)
					do
						received_display_fillRectyxwidthval271height = false
						received_display_fillRect_ = false
					end
				end
			end
			internal
			event e : display?update_
			action do
				received_display_update_ = true
				if (received_display_updateval276) do
					updateDisplay()
					do
						received_display_update_ = false
						received_display_updateval276 = false
					end
				end
			end
			internal
			event e : display?updateval276
			action do
				received_display_updateval276 = true
				display_update_val276 = e.val276
				if (received_display_update_) do
					updateDisplay()
					do
						received_display_updateval276 = false
						received_display_update_ = false
					end
				end
			end
			internal
			event e : display?drawIntegerscaleyx
			action do
				received_display_drawIntegerscaleyx = true
				display_drawInteger_scale = e.scale
				display_drawInteger_y = e.y
				display_drawInteger_x = e.x
				if (received_display_drawIntegerval272digitsv) do
					drawInteger(display_drawInteger_x, display_drawInteger_y, display_drawInteger_v, display_drawInteger_digits, display_drawInteger_scale)
					do
						received_display_drawIntegerscaleyx = false
						received_display_drawIntegerval272digitsv = false
					end
				end
			end
			internal
			event e : display?drawIntegerval272digitsv
			action do
				received_display_drawIntegerval272digitsv = true
				display_drawInteger_val272 = e.val272
				display_drawInteger_digits = e.digits
				display_drawInteger_v = e.v
				if (received_display_drawIntegerscaleyx) do
					drawInteger(display_drawInteger_x, display_drawInteger_y, display_drawInteger_v, display_drawInteger_digits, display_drawInteger_scale)
					do
						received_display_drawIntegerval272digitsv = false
						received_display_drawIntegerscaleyx = false
					end
				end
			end
			internal
			event e : display?drawThingMLval273
			action do
				received_display_drawThingMLval273 = true
				display_drawThingML_val273 = e.val273
				if (received_display_drawThingMLyx) do
					drawThingML(display_drawThingML_x, display_drawThingML_y)
					do
						received_display_drawThingMLval273 = false
						received_display_drawThingMLyx = false
					end
				end
			end
			internal
			event e : display?drawThingMLyx
			action do
				received_display_drawThingMLyx = true
				display_drawThingML_y = e.y
				display_drawThingML_x = e.x
				if (received_display_drawThingMLval273) do
					drawThingML(display_drawThingML_x, display_drawThingML_y)
					do
						received_display_drawThingMLyx = false
						received_display_drawThingMLval273 = false
					end
				end
			end
			internal
			event display?destroy_
			guard not received_display_destroyval275
			action do
				received_display_destroy_ = true
			end
			internal
			event display?destroyval275
			guard not received_display_destroy_
			action do
				received_display_destroyval275 = true
			end
			transition -> Destroyed
			event display?destroy_
			guard received_display_destroyval275
			action do
				destroyDisplay()
				received_display_destroy_ = false
				received_display_destroyval275 = false
			end
			transition -> Destroyed
			event display?destroyval275
			guard received_display_destroy_
			action do
				destroyDisplay()
				received_display_destroyval275 = false
				received_display_destroy_ = false
			end
		}
		final state Destroyed {
		}
	}
}
thing fragment ControllerMsgs {
	message positiony(val316 : Byte @noise, y : Int16)
	message velocitydydx(dy : Int16, dx : Int16, val314 : Byte @noise)
	message positionxval280(x : Int16, val317 : Byte @noise, val280 : Byte @noise)
	message velocityval279(val279 : Byte @noise, val315 : Byte @noise)
}
thing fragment Controller includes ControllerMsgs {
	provided port controls {
		sends positiony sends positionxval280
	}
}
thing fragment IAControllerMsg {
	message missBall_(val322 : Byte @noise)
	message hitBallval282(val319 : Byte @noise, val282 : Byte @noise)
	message updateIAballx(val320 : Byte @noise, ballx : Int16)
	message updateIApadyval281padxbally(padx : Int16, val321 : Byte @noise, bally : Int16, pady : Int16, val281 : Byte @noise)
	message missBallval283(val323 : Byte @noise, val283 : Byte @noise)
	message hitBall_(val318 : Byte @noise)
}
thing fragment IAController includes Controller , IAControllerMsg {
	required port game {
		receives updateIAballx receives updateIApadyval281padxbally
	}
}
thing BasicIAController includes IAController {
	property ctrlx : Int16 = 0
	statechart SC init Following {
		state Following {
			property game_updateIA_ballx : Int16
			property game_updateIA_pady : Int16
			property game_updateIA_val281 : Byte
			property game_updateIA_padx : Int16
			property game_updateIA_bally : Int16
			property received_game_updateIAballx : Boolean
			property received_game_updateIApadyval281padxbally : Boolean
			on entry do
				controls!positiony(0xFD, 0)
				controls!positionxval280(ctrlx, 0xD4, 0xEC)
			end
			internal
			event e : game?updateIAballx
			guard not received_game_updateIApadyval281padxbally
			action do
				received_game_updateIAballx = true
				game_updateIA_ballx = e.ballx
			end
			internal
			event e : game?updateIApadyval281padxbally
			guard not received_game_updateIAballx
			action do
				received_game_updateIApadyval281padxbally = true
				game_updateIA_pady = e.pady
				game_updateIA_val281 = e.val281
				game_updateIA_padx = e.padx
				game_updateIA_bally = e.bally
			end
			transition -> Following
			event e : game?updateIAballx
			guard received_game_updateIApadyval281padxbally
			action do
				game_updateIA_ballx = e.ballx
				do
					if (e.ballx > game_updateIA_padx + 400) ctrlx = ctrlx + 4
					else if (e.ballx < game_updateIA_padx - 400) ctrlx = ctrlx - 4
					if (ctrlx < -100) ctrlx = -100
					else if (ctrlx > 100) ctrlx = 100
				end
				received_game_updateIAballx = false
				received_game_updateIApadyval281padxbally = false
			end
			transition -> Following
			event e : game?updateIApadyval281padxbally
			guard received_game_updateIAballx
			action do
				game_updateIA_pady = e.pady
				game_updateIA_val281 = e.val281
				game_updateIA_padx = e.padx
				game_updateIA_bally = e.bally
				do
					if (game_updateIA_ballx > e.padx + 400) ctrlx = ctrlx + 4
					else if (game_updateIA_ballx < e.padx - 400) ctrlx = ctrlx - 4
					if (ctrlx < -100) ctrlx = -100
					else if (ctrlx > 100) ctrlx = 100
				end
				received_game_updateIApadyval281padxbally = false
				received_game_updateIAballx = false
			end
		}
	}
}
thing fragment DefaultBreakoutGame includes BreakoutGame {
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 return (`` & variable & ` & ~(1 << ` & bit & `)`) as UInt8
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as Byte
	@java_type `byte`
	@c_type `uint8_t`
	@go_type `uint8`
	{
	LOW = 0x00
	HIGH = 0x01
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , SoundMsgs , ControllerMsgs , IAControllerMsg {
	message lostBall_(val326 : Byte @noise)
	message nextLevelval285(val325 : Byte @noise, val285 : Byte @noise)
	message nextLevel_(val324 : Byte @noise)
	message lostBallval284(val284 : Byte @noise, val327 : Byte @noise)
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port sound @sync_send `true` {
		sends toneval286freq sends tonetime
	}
	optional required port display @sync_send `true` {
		sends createxsize sends createysizeval274 sends fillRect_ sends fillRectyxwidthval271height sends drawRect_ sends drawRectwidthheightval270xy sends clear_ sends clearval267 sends setColorr sends setColorbval268g sends setBGColorrg sends setBGColorval269b sends drawIntegerscaleyx sends drawIntegerval272digitsv sends update_ sends updateval276 sends drawThingMLval273 sends drawThingMLyx receives displayReady_ receives displayReadyval277 receives displayError_ receives displayErrorval278
	}
	required port controller {
		receives positiony receives positionxval280
	}
	provided port ia {
		sends updateIAballx sends updateIApadyval281padxbally sends lostBall_ sends lostBallval284 sends hitBall_ sends hitBallval282
	}
	internal port game {
		sends lostBall_ sends lostBallval284 sends nextLevel_ sends nextLevelval285 receives lostBall_ receives lostBallval284 receives nextLevel_ receives nextLevelval285
	}
	optional required port req_game {
		sends lostBall_ sends lostBallval284 sends nextLevel_ sends nextLevelval285
	}
	provided port pro_game {
		receives lostBall_ receives lostBallval284 receives nextLevel_ receives nextLevelval285
	}
	property lastTimestamp : UInt32 = 0
	property counter : UInt8 = 0
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128
	readonly property SCALE : Int16 = 64
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE
	property TOP : Int16 = 14 * SCALE
	property BOTTOM : Int16 = YMAX + 8 * SCALE
	property LEFT : Int16 = 1 * SCALE
	property RIGHT : Int16 = XMAX - 1 * SCALE
	property br : Int16 = 3 * SCALE
	property bx : Int16 = XMAX / 2
	property by : Int16 = YMAX
	property dx : Int16 = XMAX / 98
	property dy : Int16 = -XMAX / 65
	property padx : Int16 = YMAX / 2
	property pady : Int16 = YMAX - 6 * SCALE
	property padlen : Int16 = 25 * SCALE
	property prevBX : Int16 = -1
	property prevBY : Int16 = -1
	property bgcolor : UInt8 [ 3 ]
	property fgcolor : UInt8 [ 3 ]
	property period : UInt16 = 33
	readonly property tone1 : UInt16 = 440
	readonly property tone2 : UInt16 = 880
	readonly property tone_duration : UInt16 = 50
	property prevPX : Int16 = -1
	property prevPY : Int16 = -1
	readonly property BRICK_ROWS : UInt8 = 5
	readonly property BRICK_HEIGHT : UInt8 = 9
	property bricks : UInt8 [ BRICK_ROWS ]
	property score : Int16 = 0
	property lives : UInt8 = 1
	property level : UInt8 = 1
	abstract function quit()

	abstract function timestamp() : UInt32

	abstract function usedMemory() : UInt32

	function log(logMem : Boolean) do
		var ts : UInt32
		if (lastTimestamp == 0) do
			ts = 0
			lastTimestamp = timestamp()
		end
		else do
			var t : UInt32 = timestamp()
			ts = t - lastTimestamp
			lastTimestamp = t
		end
		println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
		if (counter == 0 or logMem) println "#usedMem:" , usedMemory()
		counter ++
		if (counter == 10) counter = 0
	end
	function initColors() do
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			display!setBGColorrg(bgcolor [0], bgcolor [1], 0xBF)
			display!setBGColorval269b(0xD4, bgcolor [2], 0xB9)
		end
		do
			display!setColorbval268g(fgcolor [2], 0xFD, 0x2C, fgcolor [1])
			display!setColorr(0x60, fgcolor [0])
		end
	end
	function resetBall() do
		bx = padx - br / SCALE
		by = pady - br / SCALE
		dx = (padx + prevBX + prevBY) % 300 - 150
		if (dy > 0) dy = -dy
		prevBX = -1
		prevBY = -1
	end
	function eraseBall() do
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				display!setColorbval268g(bgcolor [2], 0x1A, 0xB8, bgcolor [1])
				display!setColorr(0x1F, bgcolor [0])
			end
			do
				display!fillRectyxwidthval271height(prevBX as UInt8, bs as UInt8, bs as UInt8, 0x12, 0x94, prevBY as UInt8)
				display!fillRect_(0xBC)
			end
		end
		prevBX = -1
		prevBY = -1
	end
	function drawBall() do
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		prevBX = (bx - br) / SCALE
		prevBY = (by - br) / SCALE
		do
			display!setColorr(0xCD, 183)
			display!setColorbval268g(111, 0x29, 0x7D, 199)
		end
		do
			display!fillRect_(0xB4)
			display!fillRectyxwidthval271height(prevBX as UInt8, bs as UInt8, bs as UInt8, 0x65, 0x02, prevBY as UInt8)
		end
	end
	function erasePad() do
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				display!setColorbval268g(bgcolor [2], 0x20, 0xD0, bgcolor [1])
				display!setColorr(0x10, bgcolor [0])
			end
			do
				display!fillRectyxwidthval271height(prevPX as UInt8, ps as UInt8, 4, 0x0C, 0x18, prevPY as UInt8)
				display!fillRect_(0xD5)
			end
		end
	end
	function drawPad() do
		var ps : Int16 = padlen / SCALE
		erasePad()
		prevPX = (padx - (padlen / 2)) / SCALE
		prevPY = pady / SCALE
		do
			display!setColorbval268g(fgcolor [2], 0x46, 0xF0, fgcolor [1])
			display!setColorr(0x92, fgcolor [0])
		end
		do
			display!fillRect_(0xB4)
			display!fillRectyxwidthval271height(prevPX as UInt8, ps as UInt8, 4, 0xB7, 0x7A, prevPY as UInt8)
		end
	end
	function drawCountDown(c : Int16) do
		do
			display!setColorr(0x73, fgcolor [0])
			display!setColorbval268g(fgcolor [2], 0x64, 0xB3, fgcolor [1])
		end
		if (c > 0) do
			do
				display!setColorbval268g(fgcolor [2], 0x16, 0x9C, fgcolor [1])
				display!setColorr(0x4F, fgcolor [0])
			end
			do
				display!setBGColorrg(bgcolor [0], bgcolor [1], 0xAD)
				display!setBGColorval269b(0xBD, bgcolor [2], 0xAD)
			end
			do
				display!drawIntegerscaleyx(0x56, 80 - 6, 90, 4)
				display!drawIntegerval272digitsv(0x66, 0xF2, 1, c)
			end
		end
		else do
			do
				display!setColorbval268g(bgcolor [2], 0xCF, 0x55, bgcolor [1])
				display!setColorr(0x6F, bgcolor [0])
			end
			do
				display!fillRectyxwidthval271height(80 - 6, 12, 20, 0xF6, 0x4B, 90)
				display!fillRect_(0xAA)
			end
		end
	end
	function drawWalls() do
		do
			display!setColorbval268g(fgcolor [2], 0x44, 0x3C, fgcolor [1])
			display!setColorr(0x60, fgcolor [0])
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			display!fillRect_(0x72)
			display!fillRectyxwidthval271height(left - 1, xcenter + 1, 1, 0x5C, 0x73, top - 1)
		end
		do
			display!fillRect_(0xC0)
			display!fillRectyxwidthval271height(left - 1, xcenter + 1, 1, 0xE9, 0xD1, bottom)
		end
		do
			display!fillRect_(0x27)
			display!fillRectyxwidthval271height(left - 1, 1, ycenter, 0x06, 0xA5, top)
		end
		do
			display!fillRectyxwidthval271height(right, 1, ycenter, 0xB7, 0xFE, top)
			display!fillRect_(0x4A)
		end
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean return (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() do
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
	end
	function bricksLeft() : UInt8 do
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		return result
	end
	function drawBrick(x : UInt8, y : UInt8) do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			display!setColorbval268g(89, 0xCE, 0x61, 103)
			display!setColorr(0x14, 155)
		end
		do
			display!fillRect_(0xA6)
			display!fillRectyxwidthval271height(bx, w, h, 0x92, 0x7B, by)
		end
		do
			display!setColorr(0xF5, 100)
			display!setColorbval268g(43, 0x21, 0xEC, 56)
		end
		do
			display!drawRectwidthheightval270xy(0xE6, bx, w, 0xB8, by, h)
			display!drawRect_(0x39)
		end
	end
	function removeBrick(x : UInt8, y : UInt8) do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			display!setColorbval268g(bgcolor [2], 0x25, 0x9F, bgcolor [1])
			display!setColorr(0x03, bgcolor [0])
		end
		do
			display!fillRectyxwidthval271height(bx, (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8, BRICK_HEIGHT - 2, 0x5A, 0x7B, by)
			display!fillRect_(0xA3)
		end
		bricks[y] = unsetBit(bricks [y], x)
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean do
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		return result
	end
	function drawLevel() do
		do
			display!setColorr(0x09, 158)
			display!setColorbval268g(130, 0x6E, 0x36, 209)
		end
		do
			display!setBGColorval269b(0x54, fgcolor [2], 0xC9)
			display!setBGColorrg(fgcolor [0], fgcolor [1], 0x88)
		end
		do
			display!setColorbval268g(bgcolor [2], 0x72, 0x05, bgcolor [1])
			display!setColorr(0x21, bgcolor [0])
		end
		do
			display!drawIntegerval272digitsv(0x1C, 0x49, 2, level as Int16)
			display!drawIntegerscaleyx(0xBC, 6, 2, 2)
		end
	end
	function incrementScore(diff : Int8) do
		score = score + diff as Int16
		if (score < 0) score = 0
		drawScore()
	end
	function drawScore() do
		do
			display!setColorbval268g(130, 0x36, 0x98, 209)
			display!setColorr(0xB7, 158)
		end
		do
			display!setBGColorval269b(0x4D, fgcolor [2], 0x8F)
			display!setBGColorrg(fgcolor [0], fgcolor [1], 0x76)
		end
		do
			display!drawIntegerval272digitsv(0x1E, 0xD7, 5, score)
			display!drawIntegerscaleyx(0xCF, 58, 2, 2)
		end
	end
	function drawLives() do
		do
			display!setColorbval268g(fgcolor [2], 0x66, 0x1D, fgcolor [1])
			display!setColorr(0xFB, fgcolor [0])
		end
		do
			display!fillRectyxwidthval271height(124, 24 + 6, 6, 0xB0, 0xD0, 4)
			display!fillRect_(0x3D)
		end
		do
			display!setColorbval268g(111, 0x36, 0xD2, 199)
			display!setColorr(0x16, 183)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				display!fillRectyxwidthval271height(124 + (2 - i) * 12, 6, 6, 0xC7, 0x8F, 4)
				display!fillRect_(0xAF)
			end
			i = i + 1
		end
	end
	statechart SC init INIT {
		property controller_position_y : Int16
		property controller_position_x : Int16
		property controller_position_val280 : Byte
		property received_controller_positiony : Boolean
		property received_controller_positionxval280 : Boolean
		state INIT {
			property display_displayReady_val277 : Byte
			property received_display_displayReady_ : Boolean
			property received_display_displayReadyval277 : Boolean
			on entry do
				display!createxsize(XDISPSIZE, 0xB7)
				display!createysizeval274(YDISPSIZE, 0x1A, 0x62)
			end
			internal
			event display?displayReady_
			guard not received_display_displayReadyval277
			action do
				received_display_displayReady_ = true
			end
			internal
			event display?displayReadyval277
			guard not received_display_displayReady_
			action do
				received_display_displayReadyval277 = true
			end
			transition -> LAUNCH
			event display?displayReady_
			guard received_display_displayReadyval277
			action do
				do
					do
						display!clear_(0xA9)
						display!clearval267(0xE3, 0xFA)
					end
					initColors()
					do
						display!setColorbval268g(bgcolor [2], 0xDD, 0x28, bgcolor [1])
						display!setColorr(0xDE, bgcolor [0])
					end
					do
						display!fillRect_(0xB3)
						display!fillRectyxwidthval271height(0, XDISPSIZE, YDISPSIZE, 0xC1, 0xBE, 0)
					end
					do
						display!setColorbval268g(fgcolor [2], 0x6D, 0x44, fgcolor [1])
						display!setColorr(0x24, fgcolor [0])
					end
					do
						display!fillRect_(0xC7)
						display!fillRectyxwidthval271height(0, XDISPSIZE, 14, 0x1D, 0x6C, 0)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
				received_display_displayReady_ = false
				received_display_displayReadyval277 = false
			end
			transition -> LAUNCH
			event display?displayReadyval277
			guard received_display_displayReady_
			action do
				do
					do
						display!clearval267(0x5A, 0xFA)
						display!clear_(0xDB)
					end
					initColors()
					do
						display!setColorr(0x53, bgcolor [0])
						display!setColorbval268g(bgcolor [2], 0xDD, 0xA0, bgcolor [1])
					end
					do
						display!fillRect_(0x2B)
						display!fillRectyxwidthval271height(0, XDISPSIZE, YDISPSIZE, 0xC1, 0x34, 0)
					end
					do
						display!setColorr(0x6D, fgcolor [0])
						display!setColorbval268g(fgcolor [2], 0x6D, 0x87, fgcolor [1])
					end
					do
						display!fillRectyxwidthval271height(0, XDISPSIZE, 14, 0x1D, 0x39, 0)
						display!fillRect_(0x0A)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
				received_display_displayReadyval277 = false
				received_display_displayReady_ = false
			end
		}
		state LAUNCH {
			property countdown : UInt8
			on entry do
				clock!timer_start(0x23, 0, 33, 0xAA)
				countdown = 30 * 3
				drawScore()
				drawLives()
				do
					display!updateval276(0x5A, 0xE9)
					display!update_(0x0F)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				clock!timer_start(0x0A, 0, 33, 0x60)
				drawPad()
				if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
				countdown = countdown - 1
				do
					display!updateval276(0x80, 0x39)
					display!update_(0xBB)
				end
			end
			transition -> PLAY
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				drawCountDown(0)
				resetBall()
				do
					display!update_(0xA9)
					display!updateval276(0x58, 0x53)
				end
			end
		}
		state PLAY {
			property game_lostBall_val284 : Byte
			property received_game_lostBall_ : Boolean
			property received_game_lostBallval284 : Boolean
			property game_nextLevel_val285 : Byte
			property received_game_nextLevel_ : Boolean
			property received_game_nextLevelval285 : Boolean
			property pro_game_lostBall_val284 : Byte
			property received_pro_game_lostBall_ : Boolean
			property received_pro_game_lostBallval284 : Boolean
			property pro_game_nextLevel_val285 : Byte
			property received_pro_game_nextLevel_ : Boolean
			property received_pro_game_nextLevelval285 : Boolean
			on entry do
				clock!timer_start(0x3A, 0, period, 0x76)
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				bx = bx + dx
				by = by + dy
				var wl : Int16 = LEFT + br
				var wr : Int16 = RIGHT - br
				var wt : Int16 = TOP + br
				var wb : Int16 = BOTTOM - br
				if (bx < wl) do
					do
						sound!tonetime(0xB8, tone_duration)
						sound!toneval286freq(0xB6, tone2, 0xBB)
					end
					dx = -dx
					bx = 2 * wl - bx
					incrementScore(-1)
				end
				else if (bx > wr) do
					do
						sound!tonetime(0xD0, tone_duration)
						sound!toneval286freq(0x07, tone2, 0x37)
					end
					dx = -dx
					bx = 2 * wr - bx
					incrementScore(-1)
				end
				if (by < wt) do
					do
						sound!tonetime(0xA8, tone_duration)
						sound!toneval286freq(0x33, tone2, 0x65)
					end
					dy = -dy
					by = 2 * wt - by
					incrementScore(-1)
				end
				else if (by > wb) do
					do
						game!lostBall_(0x6A)
						game!lostBallval284(0x8A, 0x9F)
					end
					do
						req_game!lostBallval284(0xCA, 0x75)
						req_game!lostBall_(0x1D)
					end
				end
				if (dy > 0) do
					if (by > pady - br and by < pady + br) do
						if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
							do
								sound!toneval286freq(0xE4, tone2, 0x40)
								sound!tonetime(0xE1, tone_duration)
							end
							dy = -dy
							by = 2 * (pady - br) - by
							dx = dx / 4 + (bx - padx) / 4
						end
					end
				end
				var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
				if (collision) do
					do
						sound!toneval286freq(0x23, tone1, 0x62)
						sound!tonetime(0xAF, tone_duration)
					end
					dy = -dy
					incrementScore(10)
					if (bricksLeft()== 0) do
						do
							game!nextLevel_(0x44)
							game!nextLevelval285(0xB7, 0xDF)
						end
						do
							req_game!nextLevel_(0xD3)
							req_game!nextLevelval285(0x4C, 0xC9)
						end
					end
				end
				drawBall()
				drawPad()
				do
					ia!updateIApadyval281padxbally(padx, 0xE7, by, pady, 0xAF)
					ia!updateIAballx(0x85, bx)
				end
				do
					display!updateval276(0xF9, 0xCE)
					display!update_(0x2E)
				end
				log(false)
				clock!timer_start(0xAB, 0, period, 0x1D)
			end
			internal
			event game?lostBall_
			guard not received_game_lostBallval284
			action do
				received_game_lostBall_ = true
			end
			internal
			event game?lostBallval284
			guard not received_game_lostBall_
			action do
				received_game_lostBallval284 = true
			end
			internal
			event game?nextLevel_
			guard not received_game_nextLevelval285
			action do
				received_game_nextLevel_ = true
			end
			internal
			event game?nextLevelval285
			guard not received_game_nextLevel_
			action do
				received_game_nextLevelval285 = true
			end
			internal
			event pro_game?lostBall_
			guard not received_pro_game_lostBallval284
			action do
				received_pro_game_lostBall_ = true
			end
			internal
			event pro_game?lostBallval284
			guard not received_pro_game_lostBall_
			action do
				received_pro_game_lostBallval284 = true
			end
			internal
			event pro_game?nextLevel_
			guard not received_pro_game_nextLevelval285
			action do
				received_pro_game_nextLevel_ = true
			end
			internal
			event pro_game?nextLevelval285
			guard not received_pro_game_nextLevel_
			action do
				received_pro_game_nextLevelval285 = true
			end
			transition -> LOSTBALL
			event game?lostBall_
			guard received_game_lostBallval284
			action do
				clock!timer_cancel(0x9E, 0x5F, 0)
				received_game_lostBall_ = false
				received_game_lostBallval284 = false
			end
			transition -> LOSTBALL
			event game?lostBallval284
			guard received_game_lostBall_
			action do
				clock!timer_cancel(0xD7, 0x5F, 0)
				received_game_lostBallval284 = false
				received_game_lostBall_ = false
			end
			transition -> NEXTLEVEL
			event game?nextLevel_
			guard received_game_nextLevelval285
			action do
				clock!timer_cancel(0x65, 0xA6, 0)
				received_game_nextLevel_ = false
				received_game_nextLevelval285 = false
			end
			transition -> NEXTLEVEL
			event game?nextLevelval285
			guard received_game_nextLevel_
			action do
				clock!timer_cancel(0x9C, 0xA6, 0)
				received_game_nextLevelval285 = false
				received_game_nextLevel_ = false
			end
			transition -> LOSTBALL
			event pro_game?lostBall_
			guard received_pro_game_lostBallval284
			action do
				clock!timer_cancel(0xCC, 0xCF, 0)
				received_pro_game_lostBall_ = false
				received_pro_game_lostBallval284 = false
			end
			transition -> LOSTBALL
			event pro_game?lostBallval284
			guard received_pro_game_lostBall_
			action do
				clock!timer_cancel(0x0A, 0xCF, 0)
				received_pro_game_lostBallval284 = false
				received_pro_game_lostBall_ = false
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevel_
			guard received_pro_game_nextLevelval285
			action do
				clock!timer_cancel(0x18, 0xEF, 0)
				received_pro_game_nextLevel_ = false
				received_pro_game_nextLevelval285 = false
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevelval285
			guard received_pro_game_nextLevel_
			action do
				clock!timer_cancel(0x2A, 0xEF, 0)
				received_pro_game_nextLevelval285 = false
				received_pro_game_nextLevel_ = false
			end
		}
		state LOSTBALL {
			on entry do
				clock!timer_start(0x20, 0, 500, 0x04)
				lives = lives - 1
				eraseBall()
				erasePad()
				drawLives()
				do
					display!update_(0x68)
					display!updateval276(0x23, 0x3D)
				end
				log(true)
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			transition -> GAMEOVER
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
		}
		state NEXTLEVEL {
			on entry do
				clock!timer_start(0x46, 0, 1000, 0xAA)
				level = level + 1
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) padlen = padlen - (4 * SCALE)
				if ((level % 2) == 1) dy = (dy * 3) / 2
				drawLives()
				createBricks()
				do
					display!update_(0xD1)
					display!updateval276(0x18, 0x65)
				end
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0
		}
		state GAMEOVER {
			on entry do
				eraseBall()
				erasePad()
				do
					display!updateval276(0x5F, 0x57)
					display!update_(0x55)
				end
				clock!timer_start(0xDF, 0, 500, 0xDC)
			end
			transition -> NEXTLEVEL
			event t : clock?timer_timeout
			guard t.id == 0 and level < 9
			action do
				lives = 1
			end
			transition -> GAMEREALLYOVER
			event t : clock?timer_timeout
			guard t.id == 0 and level == 9
		}
		final state GAMEREALLYOVER {
			on entry do
				do
					display!setColorbval268g(255, 0xEF, 0xA1, 255)
					display!setColorr(0x42, 255)
				end
				do
					display!fillRect_(0x7F)
					display!fillRectyxwidthval271height(8, 142, 76, 0x0D, 0xDC, 30)
				end
				do
					display!setColorr(0xAB, fgcolor [0])
					display!setColorbval268g(fgcolor [2], 0x41, 0x95, fgcolor [1])
				end
				do
					display!fillRectyxwidthval271height(9, 140, 50, 0xA6, 0x22, 31)
					display!fillRect_(0xA2)
				end
				do
					display!setBGColorval269b(0xB4, fgcolor [2], 0x61)
					display!setBGColorrg(fgcolor [0], fgcolor [1], 0x17)
				end
				do
					display!setColorr(0xD7, 158)
					display!setColorbval268g(130, 0x91, 0x26, 209)
				end
				do
					display!drawIntegerval272digitsv(0xB3, 0xBC, 5, score)
					display!drawIntegerscaleyx(0x34, 23, 40, 6)
				end
				do
					display!drawThingMLval273(0xFA, 0xEE)
					display!drawThingMLyx(0x6C, 87, 26)
				end
				do
					display!updateval276(0xA2, 0xAD)
					display!update_(0x59)
				end
				log(true)
				quit()
			end
		}
		internal
		event e : controller?positiony
		action do
			received_controller_positiony = true
			controller_position_y = e.y
			if (received_controller_positionxval280) do
				do
					var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
					center = controller_position_x as Int32 * center
					center = center / 200
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
				end
				do
					received_controller_positiony = false
					received_controller_positionxval280 = false
				end
			end
		end
		internal
		event e : controller?positionxval280
		action do
			received_controller_positionxval280 = true
			controller_position_x = e.x
			controller_position_val280 = e.val280
			if (received_controller_positiony) do
				do
					var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
					center = controller_position_x as Int32 * center
					center = center / 200
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
				end
				do
					received_controller_positionxval280 = false
					received_controller_positiony = false
				end
			end
		end
	}
}
thing fragment SoundMsgs {
	message tonetime(val329 : Byte @noise, time : UInt16)
	message toneval286freq(val286 : Byte @noise, freq : UInt16, val328 : Byte @noise)
}
configuration BreakoutBrowser {
	instance game : BreakoutGameBrowser
	instance disp : DisplayBrowser
	instance timer : TimerJS
	instance ctrl : BasicIAController
	connector game.clock => timer . timer
	connector game.display => disp . display
	connector game.controller => ctrl . controls
	connector ctrl.game => game . ia
}
