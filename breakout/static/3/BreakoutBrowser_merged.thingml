object Canvas
object CanvasContext
thing DisplayBrowser includes Display , ControllerMsgs {
	provided port vctrl {
		sends velocitydy sends velocitydxval213 sends position_ sends positionxyval214
	}
	readonly property SCALE : UInt8 = 5
	property XFRAMESIZE : UInt16
	property YFRAMESIZE : UInt16
	property Buffer : CanvasContext
	property BufferCanvas : Canvas
	property Display : CanvasContext
	function initDisplay(xsize : UInt8, ysize : UInt8) do
		XFRAMESIZE = xsize
		YFRAMESIZE = ysize
		`
      document.body.style.backgroundColor = "gray";

      /* Create buffer canvas */
      var buffer = document.createElement("canvas");
      buffer.setAttribute("width", ` & XFRAMESIZE & `);
      buffer.setAttribute("height", ` & YFRAMESIZE & `);
      buffer.style.imageRendering = "pixelated";
      ` & BufferCanvas & ` = buffer;

      var bufferCtx = buffer.getContext("2d");
      bufferCtx.imageSmoothingEnabled = false;
      bufferCtx.mozImageSmoothingEnabled = false;
      bufferCtx.webkitImageSmoothingEnabled = false;
      bufferCtx.msImageSmoothingEnabled = false;
      ` & Buffer & ` = bufferCtx;

      /* Create the display canvas */
      var display = document.createElement("canvas");
      display.setAttribute("width", ` & XFRAMESIZE * SCALE & `);
      display.setAttribute("height", ` & YFRAMESIZE * SCALE & `);

      var displayCtx = display.getContext("2d");
      displayCtx.imageSmoothingEnabled = false;
      displayCtx.mozImageSmoothingEnabled = false;
      displayCtx.webkitImageSmoothingEnabled = false;
      displayCtx.msImageSmoothingEnabled = false;

      ` & Display & ` = displayCtx;

      // Put it in the middle of the window
      display.style.position = "absolute";
      display.style.left = "50%";
      display.style.top = "50%";
      display.style.marginLeft = ` & -XFRAMESIZE / 2 * SCALE & `+"px";
      display.style.marginTop = ` & -YFRAMESIZE / 2 * SCALE & `+"px";
      display.style.cursor = "none";
      document.body.appendChild(display);

      // Add mouse over events
      display.addEventListener("mousemove", (e) => {
        var mouseX = e.offsetX/(` & XFRAMESIZE * SCALE & `); // [0,1]

        // TODO: Some hardcoded numbers
        var dispX = mouseX*10240; //XMAX
        var posX = (dispX-5120)*200/8406;
        posX = Math.max(-100, Math.min(100, posX));

        `
		do
			vctrl!position_(0xEB)
			vctrl!positionxyval214(0, 0x3A, 0xAD, `posX` as Int16)
		end
	`
      });
    `
		clearScreen()
	`
      document.addEventListener("keydown", (e) => {
        if (e.key == "ArrowLeft") {
          `
		do
			vctrl!velocitydy(0, 0x28)
			vctrl!velocitydxval213(0x9D, -8, 0xE8)
		end
	`
        } else if (e.key == "ArrowRight") {
          `
		do
			vctrl!velocitydy(0, 0x32)
			vctrl!velocitydxval213(0xC7, 8, 0x9A)
		end
	`
        }
      });
      document.addEventListener("keyup", (e) => {
        if (e.key == "ArrowLeft" || e.key == "ArrowRight") {
          `
		do
			vctrl!velocitydy(0, 0x50)
			vctrl!velocitydxval213(0xFE, 0, 0x20)
		end
	`
        }
      });
    `
	`
      window.setPadPosition = (x) => { //[-100, 100]
        `
		do
			vctrl!positionxyval214(0, 0x33, 0xA5, `x` as Int16)
			vctrl!position_(0x15)
		end
	`
      };
    `
	end
	function destroyDisplay() do
	end
	function updateDisplay() do
		`` & Display & `.drawImage(` & BufferCanvas & `, 0, 0, ` & XFRAMESIZE * SCALE & `, ` & YFRAMESIZE * SCALE & `);`
	end
	function clearScreen() do
		setColor(0, 0, 0)
		fillRect(0, 0, XFRAMESIZE, YFRAMESIZE)
		updateDisplay()
	end
	function setColor(r : UInt8, g : UInt8, b : UInt8) do
		`
      ` & Buffer & `.strokeStyle = "rgb("+` & r & `+", "+` & g & `+", "+` & b & `+")";
      ` & Buffer & `.fillStyle = "rgb("+` & r & `+", "+` & g & `+", "+` & b & `+")";
    `
	end
	function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`
      var xr = Math.floor(` & x & `);
      var yr = Math.floor(` & y & `);
      var wr = Math.floor(` & width & `);
      var hr = Math.floor(` & height & `);
      ` & Buffer & `.fillRect(xr, yr, wr, 1);
      ` & Buffer & `.fillRect(xr, yr+hr-1, wr, 1);
      ` & Buffer & `.fillRect(xr, yr, 1, hr);
      ` & Buffer & `.fillRect(xr+wr-1, yr, 1, hr);
    `
	end
	function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`
      var xr = Math.floor(` & x & `);
      var yr = Math.floor(` & y & `);
      var wr = Math.floor(` & width & `);
      var hr = Math.floor(` & height & `);
      ` & Buffer & `.fillRect(xr, yr, wr, hr);
    `
	end
}
object Synth
thing SoundControllerBrowser includes Sound @js_include `https://cdnjs.cloudflare.com/ajax/libs/tone/0.10.0/Tone.min.js` {
	readonly property synth : Synth = `new Tone.Synth().toMaster()` as Synth
	function tone(f : UInt16, t : UInt16) do
		`` & synth & `.triggerAttackRelease(` & f & `, ` & t & `/1000)`
	end
}
thing BreakoutGameBrowser includes DefaultBreakoutGame {
	function quit() println "done!"
	function timestamp() : UInt32 return `Date.now()` as UInt32
	function usedMemory() : UInt32 do
		return -1
	end
}
thing fragment TimerMsgs @stl {
	message timer_timeout(id : UInt8, val223 : Byte @noise, val200 : Byte @noise)
	message timer_cancel(val221 : Byte @noise, val199 : Byte @noise, id : UInt8)
	message timer_start(val222 : Byte @noise, val198 : Byte @noise, time : UInt16, id : UInt8)
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
object JSArray
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray
	function startTimer(id : UInt8, delay : UInt16) do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(id, 0xCA, 0x18)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(m.id, 0x72, 0x49)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess
object TimerMap @go_type `map[uint8]*time.Timer`
thing fragment DisplayMsgs {
	message update_(val232 : Byte @noise)
	message clear_(val228 : Byte @noise)
	message updateval210(val233 : Byte @noise, val210 : Byte @noise)
	message drawIntegeryscaledigits(scale : UInt8, y : UInt8, val237 : Byte @noise, digits : UInt8)
	message setBGColorbrg(val240 : Byte @noise, b : UInt8, g : UInt8, r : UInt8)
	message setColorbval202(val243 : Byte @noise, b : UInt8, val202 : Byte @noise)
	message displayError_(val244 : Byte @noise)
	message displayReady_(val234 : Byte @noise)
	message destroy_(val238 : Byte @noise)
	message displayReadyval211(val235 : Byte @noise, val211 : Byte @noise)
	message displayErrorval212(val245 : Byte @noise, val212 : Byte @noise)
	message createval208ysize(ysize : UInt8, val225 : Byte @noise, val208 : Byte @noise)
	message clearval201(val201 : Byte @noise, val229 : Byte @noise)
	message fillRectx(x : UInt8, val227 : Byte @noise)
	message drawRectheightx(x : UInt8, height : UInt8, val246 : Byte @noise)
	message drawThingML_(val230 : Byte @noise)
	message fillRectywidthval205height(width : UInt8, y : UInt8, height : UInt8, val226 : Byte @noise, val205 : Byte @noise)
	message createxsize(val224 : Byte @noise, xsize : UInt8)
	message destroyval209(val209 : Byte @noise, val239 : Byte @noise)
	message setColorgr(r : UInt8, g : UInt8, val242 : Byte @noise)
	message setBGColorval203(val241 : Byte @noise, val203 : Byte @noise)
	message drawThingMLval207yx(val207 : Byte @noise, val231 : Byte @noise, x : UInt8, y : UInt8)
	message drawRectwidthval204y(val204 : Byte @noise, y : UInt8, width : UInt8, val247 : Byte @noise)
	message drawIntegerval206xv(val206 : Byte @noise, x : UInt8, v : Int16, val236 : Byte @noise)
}
thing fragment Display includes DisplayMsgs {
	provided port display {
		sends displayReady_ sends displayReadyval211 sends displayError_ sends displayErrorval212 receives createxsize receives createval208ysize receives destroy_ receives destroyval209 receives update_ receives updateval210 receives clear_ receives clearval201 receives setColorgr receives setColorbval202 receives setBGColorbrg receives setBGColorval203 receives drawRectheightx receives drawRectwidthval204y receives fillRectywidthval205height receives fillRectx receives drawIntegerval206xv receives drawIntegeryscaledigits receives drawThingML_ receives drawThingMLval207yx
	}
	property bg_r : UInt8 = 0
	property bg_g : UInt8 = 0
	property bg_b : UInt8 = 0
	property fg_r : UInt8 = 0
	property fg_g : UInt8 = 0
	property fg_b : UInt8 = 0
	abstract function initDisplay(xsize : UInt8, ysize : UInt8)

	abstract function destroyDisplay()

	abstract function updateDisplay()

	abstract function clearScreen() @abstract `true`

	abstract function setColor(r : UInt8, g : UInt8, b : UInt8)

	abstract function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)

	abstract function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)

	function drawDigit(x : UInt8, y : UInt8, d : UInt8, size : UInt8) do
		if (d < 1) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 2) do
			fillRect(x + size, y, size, 5 * size)
		end
		else if (d < 3) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 4) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x + size, y + 2 * size, 2 * size, size)
		end
		else if (d < 5) do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 6) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 7) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 5 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 8) do
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 9) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
		else do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
	end
	function drawThingML(px : Int16, py : Int16) do
		setColor(255, 255, 255)
		fillRect(px, py, 108, 13)
		var x : Int16 = px + 1
		var y : Int16 = py + 1
		setColor(80, 80, 80)
		fillRect(x + 0, y + 0, 12, 2)
		fillRect(x + 5, y + 0, 2, 11)
		fillRect(x + 18, y + 0, 2, 11)
		fillRect(x + 27, y + 0, 2, 11)
		fillRect(x + 18, y + 5, 11, 2)
		fillRect(x + 36, y + 0, 2, 11)
		fillRect(x + 44, y + 0, 2, 11)
		fillRect(x + 46, y + 1, 1, 3)
		fillRect(x + 47, y + 2, 1, 3)
		fillRect(x + 48, y + 3, 1, 3)
		fillRect(x + 49, y + 4, 1, 3)
		fillRect(x + 50, y + 5, 1, 3)
		fillRect(x + 51, y + 6, 1, 3)
		fillRect(x + 52, y + 7, 1, 3)
		fillRect(x + 53, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 69, y + 5, 5, 2)
		fillRect(x + 72, y + 7, 2, 2)
		setColor(232, 141, 10)
		fillRect(x + 80, y + 0, 11, 2)
		fillRect(x + 80, y + 0, 2, 11)
		fillRect(x + 85, y + 0, 2, 11)
		fillRect(x + 89, y + 0, 2, 11)
		fillRect(x + 95, y + 0, 2, 11)
		fillRect(x + 95, y + 9, 11, 2)
	end
	function drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8) do
		clearInteger(x, y, digits, scale)
		var val : Int16 = v
		var d : UInt8 = digits
		while (d > 0) do
			drawDigit(x + (d - 1) * 4 * scale, y, val % 10, scale)
			val = val / 10
			d = d - 1
		end
	end
	function clearInteger(x : UInt8, y : UInt8, digits : UInt8, scale : UInt8) do
		setColor(bg_r, bg_g, bg_b)
		fillRect(x, y, (digits * 4 - 1) * scale, 5 * scale)
		setColor(fg_r, fg_g, fg_b)
	end
	statechart SC init Wait {
		state Wait {
			property display_create_xsize : UInt8
			property display_create_val208 : Byte
			property display_create_ysize : UInt8
			property received_display_createxsize : Boolean
			property received_display_createval208ysize : Boolean
			internal
			event e : display?createxsize
			guard not received_display_createval208ysize
			action do
				received_display_createxsize = true
				display_create_xsize = e.xsize
			end
			internal
			event e : display?createval208ysize
			guard not received_display_createxsize
			action do
				received_display_createval208ysize = true
				display_create_val208 = e.val208
				display_create_ysize = e.ysize
			end
			transition -> Running
			event e : display?createxsize
			guard received_display_createval208ysize
			action do
				display_create_xsize = e.xsize
				initDisplay(e.xsize, display_create_ysize)
				received_display_createxsize = false
				received_display_createval208ysize = false
			end
			transition -> Running
			event e : display?createval208ysize
			guard received_display_createxsize
			action do
				display_create_val208 = e.val208
				display_create_ysize = e.ysize
				initDisplay(display_create_xsize, e.ysize)
				received_display_createval208ysize = false
				received_display_createxsize = false
			end
		}
		state Running {
			property display_setColor_g : UInt8
			property display_setColor_r : UInt8
			property display_setColor_b : UInt8
			property display_setColor_val202 : Byte
			property received_display_setColorgr : Boolean
			property received_display_setColorbval202 : Boolean
			property display_setBGColor_b : UInt8
			property display_setBGColor_r : UInt8
			property display_setBGColor_g : UInt8
			property display_setBGColor_val203 : Byte
			property received_display_setBGColorbrg : Boolean
			property received_display_setBGColorval203 : Boolean
			property display_clear_val201 : Byte
			property received_display_clear_ : Boolean
			property received_display_clearval201 : Boolean
			property display_drawRect_height : UInt8
			property display_drawRect_x : UInt8
			property display_drawRect_width : UInt8
			property display_drawRect_val204 : Byte
			property display_drawRect_y : UInt8
			property received_display_drawRectheightx : Boolean
			property received_display_drawRectwidthval204y : Boolean
			property display_fillRect_y : UInt8
			property display_fillRect_width : UInt8
			property display_fillRect_val205 : Byte
			property display_fillRect_height : UInt8
			property display_fillRect_x : UInt8
			property received_display_fillRectywidthval205height : Boolean
			property received_display_fillRectx : Boolean
			property display_update_val210 : Byte
			property received_display_update_ : Boolean
			property received_display_updateval210 : Boolean
			property display_drawInteger_val206 : Byte
			property display_drawInteger_x : UInt8
			property display_drawInteger_v : Int16
			property display_drawInteger_y : UInt8
			property display_drawInteger_scale : UInt8
			property display_drawInteger_digits : UInt8
			property received_display_drawIntegerval206xv : Boolean
			property received_display_drawIntegeryscaledigits : Boolean
			property display_drawThingML_val207 : Byte
			property display_drawThingML_y : UInt8
			property display_drawThingML_x : UInt8
			property received_display_drawThingML_ : Boolean
			property received_display_drawThingMLval207yx : Boolean
			property display_destroy_val209 : Byte
			property received_display_destroy_ : Boolean
			property received_display_destroyval209 : Boolean
			on entry do
				do
					display!displayReady_(0xDA)
					display!displayReadyval211(0x17, 0x35)
				end
			end
			internal
			event e : display?setColorgr
			action do
				received_display_setColorgr = true
				display_setColor_g = e.g
				display_setColor_r = e.r
				if (received_display_setColorbval202) do
					do
						fg_r = display_setColor_r
						fg_g = display_setColor_g
						fg_b = display_setColor_b
						setColor(display_setColor_r, display_setColor_g, display_setColor_b)
					end
					do
						received_display_setColorgr = false
						received_display_setColorbval202 = false
					end
				end
			end
			internal
			event e : display?setColorbval202
			action do
				received_display_setColorbval202 = true
				display_setColor_b = e.b
				display_setColor_val202 = e.val202
				if (received_display_setColorgr) do
					do
						fg_r = display_setColor_r
						fg_g = display_setColor_g
						fg_b = display_setColor_b
						setColor(display_setColor_r, display_setColor_g, display_setColor_b)
					end
					do
						received_display_setColorbval202 = false
						received_display_setColorgr = false
					end
				end
			end
			internal
			event e : display?setBGColorbrg
			action do
				received_display_setBGColorbrg = true
				display_setBGColor_b = e.b
				display_setBGColor_r = e.r
				display_setBGColor_g = e.g
				if (received_display_setBGColorval203) do
					do
						bg_r = display_setBGColor_r
						bg_g = display_setBGColor_g
						bg_b = display_setBGColor_b
					end
					do
						received_display_setBGColorbrg = false
						received_display_setBGColorval203 = false
					end
				end
			end
			internal
			event e : display?setBGColorval203
			action do
				received_display_setBGColorval203 = true
				display_setBGColor_val203 = e.val203
				if (received_display_setBGColorbrg) do
					do
						bg_r = display_setBGColor_r
						bg_g = display_setBGColor_g
						bg_b = display_setBGColor_b
					end
					do
						received_display_setBGColorval203 = false
						received_display_setBGColorbrg = false
					end
				end
			end
			internal
			event e : display?clear_
			action do
				received_display_clear_ = true
				if (received_display_clearval201) do
					clearScreen()
					do
						received_display_clear_ = false
						received_display_clearval201 = false
					end
				end
			end
			internal
			event e : display?clearval201
			action do
				received_display_clearval201 = true
				display_clear_val201 = e.val201
				if (received_display_clear_) do
					clearScreen()
					do
						received_display_clearval201 = false
						received_display_clear_ = false
					end
				end
			end
			internal
			event e : display?drawRectheightx
			action do
				received_display_drawRectheightx = true
				display_drawRect_height = e.height
				display_drawRect_x = e.x
				if (received_display_drawRectwidthval204y) do
					drawRect(display_drawRect_x, display_drawRect_y, display_drawRect_width, display_drawRect_height)
					do
						received_display_drawRectheightx = false
						received_display_drawRectwidthval204y = false
					end
				end
			end
			internal
			event e : display?drawRectwidthval204y
			action do
				received_display_drawRectwidthval204y = true
				display_drawRect_width = e.width
				display_drawRect_val204 = e.val204
				display_drawRect_y = e.y
				if (received_display_drawRectheightx) do
					drawRect(display_drawRect_x, display_drawRect_y, display_drawRect_width, display_drawRect_height)
					do
						received_display_drawRectwidthval204y = false
						received_display_drawRectheightx = false
					end
				end
			end
			internal
			event e : display?fillRectywidthval205height
			action do
				received_display_fillRectywidthval205height = true
				display_fillRect_y = e.y
				display_fillRect_width = e.width
				display_fillRect_val205 = e.val205
				display_fillRect_height = e.height
				if (received_display_fillRectx) do
					fillRect(display_fillRect_x, display_fillRect_y, display_fillRect_width, display_fillRect_height)
					do
						received_display_fillRectywidthval205height = false
						received_display_fillRectx = false
					end
				end
			end
			internal
			event e : display?fillRectx
			action do
				received_display_fillRectx = true
				display_fillRect_x = e.x
				if (received_display_fillRectywidthval205height) do
					fillRect(display_fillRect_x, display_fillRect_y, display_fillRect_width, display_fillRect_height)
					do
						received_display_fillRectx = false
						received_display_fillRectywidthval205height = false
					end
				end
			end
			internal
			event e : display?update_
			action do
				received_display_update_ = true
				if (received_display_updateval210) do
					updateDisplay()
					do
						received_display_update_ = false
						received_display_updateval210 = false
					end
				end
			end
			internal
			event e : display?updateval210
			action do
				received_display_updateval210 = true
				display_update_val210 = e.val210
				if (received_display_update_) do
					updateDisplay()
					do
						received_display_updateval210 = false
						received_display_update_ = false
					end
				end
			end
			internal
			event e : display?drawIntegerval206xv
			action do
				received_display_drawIntegerval206xv = true
				display_drawInteger_val206 = e.val206
				display_drawInteger_x = e.x
				display_drawInteger_v = e.v
				if (received_display_drawIntegeryscaledigits) do
					drawInteger(display_drawInteger_x, display_drawInteger_y, display_drawInteger_v, display_drawInteger_digits, display_drawInteger_scale)
					do
						received_display_drawIntegerval206xv = false
						received_display_drawIntegeryscaledigits = false
					end
				end
			end
			internal
			event e : display?drawIntegeryscaledigits
			action do
				received_display_drawIntegeryscaledigits = true
				display_drawInteger_y = e.y
				display_drawInteger_scale = e.scale
				display_drawInteger_digits = e.digits
				if (received_display_drawIntegerval206xv) do
					drawInteger(display_drawInteger_x, display_drawInteger_y, display_drawInteger_v, display_drawInteger_digits, display_drawInteger_scale)
					do
						received_display_drawIntegeryscaledigits = false
						received_display_drawIntegerval206xv = false
					end
				end
			end
			internal
			event e : display?drawThingML_
			action do
				received_display_drawThingML_ = true
				if (received_display_drawThingMLval207yx) do
					drawThingML(display_drawThingML_x, display_drawThingML_y)
					do
						received_display_drawThingML_ = false
						received_display_drawThingMLval207yx = false
					end
				end
			end
			internal
			event e : display?drawThingMLval207yx
			action do
				received_display_drawThingMLval207yx = true
				display_drawThingML_val207 = e.val207
				display_drawThingML_y = e.y
				display_drawThingML_x = e.x
				if (received_display_drawThingML_) do
					drawThingML(display_drawThingML_x, display_drawThingML_y)
					do
						received_display_drawThingMLval207yx = false
						received_display_drawThingML_ = false
					end
				end
			end
			internal
			event display?destroy_
			guard not received_display_destroyval209
			action do
				received_display_destroy_ = true
			end
			internal
			event display?destroyval209
			guard not received_display_destroy_
			action do
				received_display_destroyval209 = true
			end
			transition -> Destroyed
			event display?destroy_
			guard received_display_destroyval209
			action do
				destroyDisplay()
				received_display_destroy_ = false
				received_display_destroyval209 = false
			end
			transition -> Destroyed
			event display?destroyval209
			guard received_display_destroy_
			action do
				destroyDisplay()
				received_display_destroyval209 = false
				received_display_destroy_ = false
			end
		}
		final state Destroyed {
		}
	}
}
thing fragment ControllerMsgs {
	message velocitydy(dy : Int16, val248 : Byte @noise)
	message position_(val250 : Byte @noise)
	message velocitydxval213(val249 : Byte @noise, dx : Int16, val213 : Byte @noise)
	message positionxyval214(y : Int16, val214 : Byte @noise, val251 : Byte @noise, x : Int16)
}
thing fragment Controller includes ControllerMsgs {
	provided port controls {
		sends position_ sends positionxyval214
	}
}
thing fragment TimerController includes Controller , TimerMsgs {
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	readonly property XMAX : Int16 = 100
	readonly property YMAX : Int16 = 100
	readonly property XMIN : Int16 = -100
	readonly property YMIN : Int16 = -100
	property posX : Int16 = 0
	property posY : Int16 = 0
	property dx : Int16 = 0
	property dy : Int16 = 0
}
thing VelocityController includes TimerController {
	required port ctrl_in {
		receives velocitydy receives velocitydxval213 receives position_ receives positionxyval214
	}
	readonly property timerID : UInt8 = 4
	statechart SC init Running {
		property ctrl_in_velocity_dy : Int16
		property ctrl_in_velocity_dx : Int16
		property ctrl_in_velocity_val213 : Byte
		property received_ctrl_in_velocitydy : Boolean
		property received_ctrl_in_velocitydxval213 : Boolean
		state Running {
			property ctrl_in_position_x : Int16
			property ctrl_in_position_y : Int16
			property ctrl_in_position_val214 : Byte
			property received_ctrl_in_position_ : Boolean
			property received_ctrl_in_positionxyval214 : Boolean
			on entry clock!timer_start(0x5E, 0xE0, 50, timerID)
			internal
			event e : ctrl_in?position_
			action do
				received_ctrl_in_position_ = true
				if (received_ctrl_in_positionxyval214) do
					do
						posX = ctrl_in_position_x
						posY = ctrl_in_position_y
						if (posX < XMIN) posX = XMIN
						else if (posX > XMAX) posX = XMAX
						if (posY < YMIN) posY = YMIN
						else if (posY > YMAX) posY = YMAX
						do
							controls!position_(0xB1)
							controls!positionxyval214(posY, 0xC9, 0x98, posX)
						end
					end
					do
						received_ctrl_in_position_ = false
						received_ctrl_in_positionxyval214 = false
					end
				end
			end
			internal
			event e : ctrl_in?positionxyval214
			action do
				received_ctrl_in_positionxyval214 = true
				ctrl_in_position_x = e.x
				ctrl_in_position_y = e.y
				ctrl_in_position_val214 = e.val214
				if (received_ctrl_in_position_) do
					do
						posX = ctrl_in_position_x
						posY = ctrl_in_position_y
						if (posX < XMIN) posX = XMIN
						else if (posX > XMAX) posX = XMAX
						if (posY < YMIN) posY = YMIN
						else if (posY > YMAX) posY = YMAX
						do
							controls!position_(0x58)
							controls!positionxyval214(posY, 0xC9, 0x15, posX)
						end
					end
					do
						received_ctrl_in_positionxyval214 = false
						received_ctrl_in_position_ = false
					end
				end
			end
			transition -> Running
			event e : clock?timer_timeout
			guard e.id == timerID
			action do
				posX = posX + dx
				posY = posY + dy
				if (posX < XMIN) posX = XMIN
				else if (posX > XMAX) posX = XMAX
				if (posY < YMIN) posY = YMIN
				else if (posY > YMAX) posY = YMAX
				do
					controls!position_(0xCF)
					controls!positionxyval214(posY, 0x25, 0xE0, posX)
				end
			end
		}
		internal
		event e : ctrl_in?velocitydy
		action do
			received_ctrl_in_velocitydy = true
			ctrl_in_velocity_dy = e.dy
			if (received_ctrl_in_velocitydxval213) do
				do
					dx = ctrl_in_velocity_dx
					dy = ctrl_in_velocity_dy
				end
				do
					received_ctrl_in_velocitydy = false
					received_ctrl_in_velocitydxval213 = false
				end
			end
		end
		internal
		event e : ctrl_in?velocitydxval213
		action do
			received_ctrl_in_velocitydxval213 = true
			ctrl_in_velocity_dx = e.dx
			ctrl_in_velocity_val213 = e.val213
			if (received_ctrl_in_velocitydy) do
				do
					dx = ctrl_in_velocity_dx
					dy = ctrl_in_velocity_dy
				end
				do
					received_ctrl_in_velocitydxval213 = false
					received_ctrl_in_velocitydy = false
				end
			end
		end
	}
}
thing fragment IAControllerMsg {
	message missBallval217(val217 : Byte @noise, val255 : Byte @noise)
	message updateIAval215ballxpady(ballx : Int16, pady : Int16, val215 : Byte @noise, val257 : Byte @noise)
	message hitBall_(val252 : Byte @noise)
	message missBall_(val254 : Byte @noise)
	message hitBallval216(val216 : Byte @noise, val253 : Byte @noise)
	message updateIAballypadx(val256 : Byte @noise, bally : Int16, padx : Int16)
}
thing fragment SoundMsgs {
	message tonetime(time : UInt16, val259 : Byte @noise)
	message toneval218freq(val258 : Byte @noise, freq : UInt16, val218 : Byte @noise)
}
thing fragment Sound includes SoundMsgs {
	provided port sound {
		receives toneval218freq receives tonetime
	}
	abstract function tone(f : UInt16, t : UInt16) @abstract `true`

	statechart behavior init INIT {
		state INIT {
			property sound_tone_val218 : Byte
			property sound_tone_freq : UInt16
			property sound_tone_time : UInt16
			property received_sound_toneval218freq : Boolean
			property received_sound_tonetime : Boolean
			internal
			event t : sound?toneval218freq
			action do
				received_sound_toneval218freq = true
				sound_tone_val218 = t.val218
				sound_tone_freq = t.freq
				if (received_sound_tonetime) do
					tone(sound_tone_freq, sound_tone_time)
					do
						received_sound_toneval218freq = false
						received_sound_tonetime = false
					end
				end
			end
			internal
			event t : sound?tonetime
			action do
				received_sound_tonetime = true
				sound_tone_time = t.time
				if (received_sound_toneval218freq) do
					tone(sound_tone_freq, sound_tone_time)
					do
						received_sound_tonetime = false
						received_sound_toneval218freq = false
					end
				end
			end
		}
	}
}
thing fragment DefaultBreakoutGame includes BreakoutGame {
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 return (`` & variable & ` & ~(1 << ` & bit & `)`) as UInt8
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as Byte
	@java_type `byte`
	@c_type `uint8_t`
	@go_type `uint8`
	{
	LOW = 0x00
	HIGH = 0x01
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , SoundMsgs , ControllerMsgs , IAControllerMsg {
	message lostBallval219(val219 : Byte @noise, val263 : Byte @noise)
	message lostBall_(val262 : Byte @noise)
	message nextLevel_(val260 : Byte @noise)
	message nextLevelval220(val261 : Byte @noise, val220 : Byte @noise)
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port sound @sync_send `true` {
		sends toneval218freq sends tonetime
	}
	optional required port display @sync_send `true` {
		sends createxsize sends createval208ysize sends fillRectywidthval205height sends fillRectx sends drawRectheightx sends drawRectwidthval204y sends clear_ sends clearval201 sends setColorgr sends setColorbval202 sends setBGColorbrg sends setBGColorval203 sends drawIntegerval206xv sends drawIntegeryscaledigits sends update_ sends updateval210 sends drawThingML_ sends drawThingMLval207yx receives displayReady_ receives displayReadyval211 receives displayError_ receives displayErrorval212
	}
	required port controller {
		receives position_ receives positionxyval214
	}
	provided port ia {
		sends updateIAballypadx sends updateIAval215ballxpady sends lostBall_ sends lostBallval219 sends hitBall_ sends hitBallval216
	}
	internal port game {
		sends lostBall_ sends lostBallval219 sends nextLevel_ sends nextLevelval220 receives lostBall_ receives lostBallval219 receives nextLevel_ receives nextLevelval220
	}
	optional required port req_game {
		sends lostBall_ sends lostBallval219 sends nextLevel_ sends nextLevelval220
	}
	provided port pro_game {
		receives lostBall_ receives lostBallval219 receives nextLevel_ receives nextLevelval220
	}
	property lastTimestamp : UInt32 = 0
	property counter : UInt8 = 0
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128
	readonly property SCALE : Int16 = 64
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE
	property TOP : Int16 = 14 * SCALE
	property BOTTOM : Int16 = YMAX + 8 * SCALE
	property LEFT : Int16 = 1 * SCALE
	property RIGHT : Int16 = XMAX - 1 * SCALE
	property br : Int16 = 3 * SCALE
	property bx : Int16 = XMAX / 2
	property by : Int16 = YMAX
	property dx : Int16 = XMAX / 98
	property dy : Int16 = -XMAX / 65
	property padx : Int16 = YMAX / 2
	property pady : Int16 = YMAX - 6 * SCALE
	property padlen : Int16 = 25 * SCALE
	property prevBX : Int16 = -1
	property prevBY : Int16 = -1
	property bgcolor : UInt8 [ 3 ]
	property fgcolor : UInt8 [ 3 ]
	property period : UInt16 = 33
	readonly property tone1 : UInt16 = 440
	readonly property tone2 : UInt16 = 880
	readonly property tone_duration : UInt16 = 50
	property prevPX : Int16 = -1
	property prevPY : Int16 = -1
	readonly property BRICK_ROWS : UInt8 = 5
	readonly property BRICK_HEIGHT : UInt8 = 9
	property bricks : UInt8 [ BRICK_ROWS ]
	property score : Int16 = 0
	property lives : UInt8 = 3
	property level : UInt8 = 1
	abstract function quit()

	abstract function timestamp() : UInt32

	abstract function usedMemory() : UInt32

	function log(logMem : Boolean) do
		var ts : UInt32
		if (lastTimestamp == 0) do
			ts = 0
			lastTimestamp = timestamp()
		end
		else do
			var t : UInt32 = timestamp()
			ts = t - lastTimestamp
			lastTimestamp = t
		end
		println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
		if (counter == 0 or logMem) println "#usedMem:" , usedMemory()
		counter ++
		if (counter == 10) counter = 0
	end
	function initColors() do
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			display!setBGColorbrg(0x6A, bgcolor [2], bgcolor [1], bgcolor [0])
			display!setBGColorval203(0x23, 0x9C)
		end
		do
			display!setColorbval202(0x54, fgcolor [2], 0x31)
			display!setColorgr(fgcolor [0], fgcolor [1], 0x43)
		end
	end
	function resetBall() do
		bx = padx - br / SCALE
		by = pady - br / SCALE
		dx = (padx + prevBX + prevBY) % 300 - 150
		if (dy > 0) dy = -dy
		prevBX = -1
		prevBY = -1
	end
	function eraseBall() do
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				display!setColorgr(bgcolor [0], bgcolor [1], 0x30)
				display!setColorbval202(0x2C, bgcolor [2], 0x22)
			end
			do
				display!fillRectywidthval205height(bs as UInt8, prevBY as UInt8, bs as UInt8, 0x89, 0xAE)
				display!fillRectx(prevBX as UInt8, 0x35)
			end
		end
		prevBX = -1
		prevBY = -1
	end
	function drawBall() do
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		prevBX = (bx - br) / SCALE
		prevBY = (by - br) / SCALE
		do
			display!setColorbval202(0xEE, 111, 0xDA)
			display!setColorgr(183, 199, 0xF9)
		end
		do
			display!fillRectx(prevBX as UInt8, 0xF3)
			display!fillRectywidthval205height(bs as UInt8, prevBY as UInt8, bs as UInt8, 0xFD, 0x44)
		end
	end
	function erasePad() do
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				display!setColorbval202(0x3B, bgcolor [2], 0xA9)
				display!setColorgr(bgcolor [0], bgcolor [1], 0xC5)
			end
			do
				display!fillRectywidthval205height(ps as UInt8, prevPY as UInt8, 4, 0xF8, 0xDB)
				display!fillRectx(prevPX as UInt8, 0x0F)
			end
		end
	end
	function drawPad() do
		var ps : Int16 = padlen / SCALE
		erasePad()
		prevPX = (padx - (padlen / 2)) / SCALE
		prevPY = pady / SCALE
		do
			display!setColorgr(fgcolor [0], fgcolor [1], 0xD7)
			display!setColorbval202(0x1C, fgcolor [2], 0x26)
		end
		do
			display!fillRectx(prevPX as UInt8, 0xFF)
			display!fillRectywidthval205height(ps as UInt8, prevPY as UInt8, 4, 0x29, 0x4F)
		end
	end
	function drawCountDown(c : Int16) do
		do
			display!setColorbval202(0x85, fgcolor [2], 0x7F)
			display!setColorgr(fgcolor [0], fgcolor [1], 0xD1)
		end
		if (c > 0) do
			do
				display!setColorgr(fgcolor [0], fgcolor [1], 0x1F)
				display!setColorbval202(0x7E, fgcolor [2], 0x3A)
			end
			do
				display!setBGColorbrg(0x00, bgcolor [2], bgcolor [1], bgcolor [0])
				display!setBGColorval203(0xED, 0xF4)
			end
			do
				display!drawIntegerval206xv(0x83, 80 - 6, c, 0xF3)
				display!drawIntegeryscaledigits(4, 90, 0x68, 1)
			end
		end
		else do
			do
				display!setColorbval202(0xB4, bgcolor [2], 0x4B)
				display!setColorgr(bgcolor [0], bgcolor [1], 0x84)
			end
			do
				display!fillRectywidthval205height(12, 90, 20, 0x08, 0x20)
				display!fillRectx(80 - 6, 0xA0)
			end
		end
	end
	function drawWalls() do
		do
			display!setColorbval202(0x62, fgcolor [2], 0xEE)
			display!setColorgr(fgcolor [0], fgcolor [1], 0xDE)
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			display!fillRectx(left - 1, 0xAD)
			display!fillRectywidthval205height(xcenter + 1, top - 1, 1, 0x4E, 0x2E)
		end
		do
			display!fillRectx(left - 1, 0xD8)
			display!fillRectywidthval205height(xcenter + 1, bottom, 1, 0xC2, 0xA4)
		end
		do
			display!fillRectywidthval205height(1, top, ycenter, 0xC5, 0xE5)
			display!fillRectx(left - 1, 0x92)
		end
		do
			display!fillRectywidthval205height(1, top, ycenter, 0x9C, 0x59)
			display!fillRectx(right, 0x78)
		end
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean return (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() do
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
	end
	function bricksLeft() : UInt8 do
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		return result
	end
	function drawBrick(x : UInt8, y : UInt8) do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			display!setColorgr(155, 103, 0xFB)
			display!setColorbval202(0x03, 89, 0xBC)
		end
		do
			display!fillRectywidthval205height(w, by, h, 0xF1, 0xC0)
			display!fillRectx(bx, 0x48)
		end
		do
			display!setColorbval202(0x52, 43, 0x3B)
			display!setColorgr(100, 56, 0xB5)
		end
		do
			display!drawRectheightx(bx, h, 0x57)
			display!drawRectwidthval204y(0x66, by, w, 0xFD)
		end
	end
	function removeBrick(x : UInt8, y : UInt8) do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			display!setColorgr(bgcolor [0], bgcolor [1], 0x32)
			display!setColorbval202(0x4E, bgcolor [2], 0x04)
		end
		do
			display!fillRectywidthval205height((((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8, by, BRICK_HEIGHT - 2, 0xE0, 0xC2)
			display!fillRectx(bx, 0x27)
		end
		bricks[y] = unsetBit(bricks [y], x)
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean do
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		return result
	end
	function drawLevel() do
		do
			display!setColorbval202(0x63, 130, 0xEA)
			display!setColorgr(158, 209, 0x62)
		end
		do
			display!setBGColorval203(0x57, 0xD4)
			display!setBGColorbrg(0xD6, fgcolor [2], fgcolor [1], fgcolor [0])
		end
		do
			display!setColorgr(bgcolor [0], bgcolor [1], 0xE0)
			display!setColorbval202(0xC3, bgcolor [2], 0x10)
		end
		do
			display!drawIntegeryscaledigits(2, 2, 0xB5, 2)
			display!drawIntegerval206xv(0x71, 6, level as Int16, 0x7C)
		end
	end
	function incrementScore(diff : Int8) do
		score = score + diff as Int16
		if (score < 0) score = 0
		drawScore()
	end
	function drawScore() do
		do
			display!setColorgr(158, 209, 0x89)
			display!setColorbval202(0xDC, 130, 0x60)
		end
		do
			display!setBGColorval203(0x9D, 0xC7)
			display!setBGColorbrg(0x09, fgcolor [2], fgcolor [1], fgcolor [0])
		end
		do
			display!drawIntegeryscaledigits(2, 2, 0xA6, 5)
			display!drawIntegerval206xv(0x2C, 58, score, 0x53)
		end
	end
	function drawLives() do
		do
			display!setColorgr(fgcolor [0], fgcolor [1], 0xFE)
			display!setColorbval202(0x35, fgcolor [2], 0x96)
		end
		do
			display!fillRectywidthval205height(24 + 6, 4, 6, 0x68, 0x2D)
			display!fillRectx(124, 0x23)
		end
		do
			display!setColorbval202(0x18, 111, 0x94)
			display!setColorgr(183, 199, 0x50)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				display!fillRectywidthval205height(6, 4, 6, 0x06, 0x5E)
				display!fillRectx(124 + (2 - i) * 12, 0xCD)
			end
			i = i + 1
		end
	end
	statechart SC init INIT {
		property controller_position_x : Int16
		property controller_position_y : Int16
		property controller_position_val214 : Byte
		property received_controller_position_ : Boolean
		property received_controller_positionxyval214 : Boolean
		state INIT {
			property display_displayReady_val211 : Byte
			property received_display_displayReady_ : Boolean
			property received_display_displayReadyval211 : Boolean
			on entry do
				display!createval208ysize(YDISPSIZE, 0xE2, 0x9C)
				display!createxsize(0xEF, XDISPSIZE)
			end
			internal
			event display?displayReady_
			guard not received_display_displayReadyval211
			action do
				received_display_displayReady_ = true
			end
			internal
			event display?displayReadyval211
			guard not received_display_displayReady_
			action do
				received_display_displayReadyval211 = true
			end
			transition -> LAUNCH
			event display?displayReady_
			guard received_display_displayReadyval211
			action do
				do
					do
						display!clear_(0xB9)
						display!clearval201(0x23, 0x5C)
					end
					initColors()
					do
						display!setColorbval202(0x09, bgcolor [2], 0xD0)
						display!setColorgr(bgcolor [0], bgcolor [1], 0x46)
					end
					do
						display!fillRectywidthval205height(XDISPSIZE, 0, YDISPSIZE, 0x7D, 0xCA)
						display!fillRectx(0, 0xE7)
					end
					do
						display!setColorgr(fgcolor [0], fgcolor [1], 0xC4)
						display!setColorbval202(0xAC, fgcolor [2], 0x6A)
					end
					do
						display!fillRectywidthval205height(XDISPSIZE, 0, 14, 0xA3, 0x26)
						display!fillRectx(0, 0xA3)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
				received_display_displayReady_ = false
				received_display_displayReadyval211 = false
			end
			transition -> LAUNCH
			event display?displayReadyval211
			guard received_display_displayReady_
			action do
				do
					do
						display!clearval201(0x23, 0x59)
						display!clear_(0x61)
					end
					initColors()
					do
						display!setColorgr(bgcolor [0], bgcolor [1], 0xB5)
						display!setColorbval202(0xF7, bgcolor [2], 0xD0)
					end
					do
						display!fillRectywidthval205height(XDISPSIZE, 0, YDISPSIZE, 0x51, 0xCA)
						display!fillRectx(0, 0x16)
					end
					do
						display!setColorgr(fgcolor [0], fgcolor [1], 0x96)
						display!setColorbval202(0x70, fgcolor [2], 0x6A)
					end
					do
						display!fillRectywidthval205height(XDISPSIZE, 0, 14, 0xF1, 0x26)
						display!fillRectx(0, 0x10)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
				received_display_displayReadyval211 = false
				received_display_displayReady_ = false
			end
		}
		state LAUNCH {
			property countdown : UInt8
			on entry do
				clock!timer_start(0x66, 0xEF, 33, 0)
				countdown = 30 * 3
				drawScore()
				drawLives()
				do
					display!update_(0xD0)
					display!updateval210(0xC6, 0xD6)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				clock!timer_start(0xAF, 0x7C, 33, 0)
				drawPad()
				if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
				countdown = countdown - 1
				do
					display!update_(0x2B)
					display!updateval210(0x3C, 0xEC)
				end
			end
			transition -> PLAY
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				drawCountDown(0)
				resetBall()
				do
					display!updateval210(0x35, 0x40)
					display!update_(0x61)
				end
			end
		}
		state PLAY {
			property game_lostBall_val219 : Byte
			property received_game_lostBall_ : Boolean
			property received_game_lostBallval219 : Boolean
			property game_nextLevel_val220 : Byte
			property received_game_nextLevel_ : Boolean
			property received_game_nextLevelval220 : Boolean
			property pro_game_lostBall_val219 : Byte
			property received_pro_game_lostBall_ : Boolean
			property received_pro_game_lostBallval219 : Boolean
			property pro_game_nextLevel_val220 : Byte
			property received_pro_game_nextLevel_ : Boolean
			property received_pro_game_nextLevelval220 : Boolean
			on entry do
				clock!timer_start(0xDB, 0x2A, period, 0)
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				bx = bx + dx
				by = by + dy
				var wl : Int16 = LEFT + br
				var wr : Int16 = RIGHT - br
				var wt : Int16 = TOP + br
				var wb : Int16 = BOTTOM - br
				if (bx < wl) do
					do
						sound!toneval218freq(0x28, tone2, 0x4A)
						sound!tonetime(tone_duration, 0x98)
					end
					dx = -dx
					bx = 2 * wl - bx
					incrementScore(-1)
				end
				else if (bx > wr) do
					do
						sound!toneval218freq(0xF1, tone2, 0xD4)
						sound!tonetime(tone_duration, 0xB4)
					end
					dx = -dx
					bx = 2 * wr - bx
					incrementScore(-1)
				end
				if (by < wt) do
					do
						sound!toneval218freq(0xA6, tone2, 0x02)
						sound!tonetime(tone_duration, 0xB1)
					end
					dy = -dy
					by = 2 * wt - by
					incrementScore(-1)
				end
				else if (by > wb) do
					do
						game!lostBallval219(0x32, 0x0D)
						game!lostBall_(0x33)
					end
					do
						req_game!lostBallval219(0x35, 0x7B)
						req_game!lostBall_(0x8B)
					end
				end
				if (dy > 0) do
					if (by > pady - br and by < pady + br) do
						if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
							do
								sound!toneval218freq(0xE4, tone2, 0xB2)
								sound!tonetime(tone_duration, 0x20)
							end
							dy = -dy
							by = 2 * (pady - br) - by
							dx = dx / 4 + (bx - padx) / 4
						end
					end
				end
				var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
				if (collision) do
					do
						sound!tonetime(tone_duration, 0x35)
						sound!toneval218freq(0x28, tone1, 0xF6)
					end
					dy = -dy
					incrementScore(10)
					if (bricksLeft()== 0) do
						do
							game!nextLevel_(0x9B)
							game!nextLevelval220(0x6E, 0x91)
						end
						do
							req_game!nextLevel_(0xB5)
							req_game!nextLevelval220(0xAF, 0x4A)
						end
					end
				end
				drawBall()
				drawPad()
				do
					ia!updateIAballypadx(0x38, by, padx)
					ia!updateIAval215ballxpady(bx, pady, 0xCB, 0x88)
				end
				do
					display!updateval210(0xBD, 0x7D)
					display!update_(0x2C)
				end
				log(false)
				clock!timer_start(0xA0, 0xF1, period, 0)
			end
			internal
			event game?lostBall_
			guard not received_game_lostBallval219
			action do
				received_game_lostBall_ = true
			end
			internal
			event game?lostBallval219
			guard not received_game_lostBall_
			action do
				received_game_lostBallval219 = true
			end
			internal
			event game?nextLevel_
			guard not received_game_nextLevelval220
			action do
				received_game_nextLevel_ = true
			end
			internal
			event game?nextLevelval220
			guard not received_game_nextLevel_
			action do
				received_game_nextLevelval220 = true
			end
			internal
			event pro_game?lostBall_
			guard not received_pro_game_lostBallval219
			action do
				received_pro_game_lostBall_ = true
			end
			internal
			event pro_game?lostBallval219
			guard not received_pro_game_lostBall_
			action do
				received_pro_game_lostBallval219 = true
			end
			internal
			event pro_game?nextLevel_
			guard not received_pro_game_nextLevelval220
			action do
				received_pro_game_nextLevel_ = true
			end
			internal
			event pro_game?nextLevelval220
			guard not received_pro_game_nextLevel_
			action do
				received_pro_game_nextLevelval220 = true
			end
			transition -> LOSTBALL
			event game?lostBall_
			guard received_game_lostBallval219
			action do
				clock!timer_cancel(0x20, 0x75, 0)
				received_game_lostBall_ = false
				received_game_lostBallval219 = false
			end
			transition -> LOSTBALL
			event game?lostBallval219
			guard received_game_lostBall_
			action do
				clock!timer_cancel(0xA5, 0x75, 0)
				received_game_lostBallval219 = false
				received_game_lostBall_ = false
			end
			transition -> NEXTLEVEL
			event game?nextLevel_
			guard received_game_nextLevelval220
			action do
				clock!timer_cancel(0xBC, 0xF9, 0)
				received_game_nextLevel_ = false
				received_game_nextLevelval220 = false
			end
			transition -> NEXTLEVEL
			event game?nextLevelval220
			guard received_game_nextLevel_
			action do
				clock!timer_cancel(0x20, 0xF9, 0)
				received_game_nextLevelval220 = false
				received_game_nextLevel_ = false
			end
			transition -> LOSTBALL
			event pro_game?lostBall_
			guard received_pro_game_lostBallval219
			action do
				clock!timer_cancel(0x36, 0xCB, 0)
				received_pro_game_lostBall_ = false
				received_pro_game_lostBallval219 = false
			end
			transition -> LOSTBALL
			event pro_game?lostBallval219
			guard received_pro_game_lostBall_
			action do
				clock!timer_cancel(0x89, 0xCB, 0)
				received_pro_game_lostBallval219 = false
				received_pro_game_lostBall_ = false
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevel_
			guard received_pro_game_nextLevelval220
			action do
				clock!timer_cancel(0xA0, 0x7D, 0)
				received_pro_game_nextLevel_ = false
				received_pro_game_nextLevelval220 = false
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevelval220
			guard received_pro_game_nextLevel_
			action do
				clock!timer_cancel(0xC3, 0x7D, 0)
				received_pro_game_nextLevelval220 = false
				received_pro_game_nextLevel_ = false
			end
		}
		state LOSTBALL {
			on entry do
				clock!timer_start(0x04, 0xF3, 500, 0)
				lives = lives - 1
				eraseBall()
				erasePad()
				drawLives()
				do
					display!updateval210(0x13, 0x65)
					display!update_(0xB3)
				end
				log(true)
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			transition -> GAMEOVER
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
		}
		state NEXTLEVEL {
			on entry do
				clock!timer_start(0xA6, 0x78, 1000, 0)
				level = level + 1
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) padlen = padlen - (4 * SCALE)
				if ((level % 2) == 1) dy = (dy * 3) / 2
				drawLives()
				createBricks()
				do
					display!update_(0x4C)
					display!updateval210(0xAF, 0x59)
				end
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0
		}
		final state GAMEOVER {
			on entry do
				eraseBall()
				erasePad()
				do
					display!setColorbval202(0x88, 255, 0xCD)
					display!setColorgr(255, 255, 0x40)
				end
				do
					display!fillRectx(8, 0x2D)
					display!fillRectywidthval205height(142, 30, 76, 0x34, 0xAA)
				end
				do
					display!setColorgr(fgcolor [0], fgcolor [1], 0xCD)
					display!setColorbval202(0x1B, fgcolor [2], 0x86)
				end
				do
					display!fillRectx(9, 0x3D)
					display!fillRectywidthval205height(140, 31, 50, 0x68, 0xFC)
				end
				do
					display!setBGColorbrg(0xC9, fgcolor [2], fgcolor [1], fgcolor [0])
					display!setBGColorval203(0x31, 0x20)
				end
				do
					display!setColorbval202(0x67, 130, 0xD2)
					display!setColorgr(158, 209, 0x6A)
				end
				do
					display!drawIntegeryscaledigits(6, 40, 0x24, 5)
					display!drawIntegerval206xv(0x8E, 23, score, 0x89)
				end
				do
					display!drawThingML_(0x11)
					display!drawThingMLval207yx(0x18, 0xC5, 26, 87)
				end
				do
					display!updateval210(0xA9, 0x14)
					display!update_(0xB2)
				end
				log(true)
				quit()
			end
		}
		internal
		event e : controller?position_
		action do
			received_controller_position_ = true
			if (received_controller_positionxyval214) do
				do
					var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
					center = controller_position_x as Int32 * center
					center = center / 200
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
				end
				do
					received_controller_position_ = false
					received_controller_positionxyval214 = false
				end
			end
		end
		internal
		event e : controller?positionxyval214
		action do
			received_controller_positionxyval214 = true
			controller_position_x = e.x
			controller_position_y = e.y
			controller_position_val214 = e.val214
			if (received_controller_position_) do
				do
					var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
					center = controller_position_x as Int32 * center
					center = center / 200
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
				end
				do
					received_controller_positionxyval214 = false
					received_controller_position_ = false
				end
			end
		end
	}
}
configuration BreakoutBrowser {
	instance game : BreakoutGameBrowser
	instance disp : DisplayBrowser
	instance sound : SoundControllerBrowser
	instance ctrl : VelocityController
	instance timer : TimerJS
	connector game.clock => timer . timer
	connector ctrl.clock => timer . timer
	connector game.display => disp . display
	connector game.sound => sound . sound
	connector game.controller => ctrl . controls
	connector ctrl.ctrl_in => disp . vctrl
}
