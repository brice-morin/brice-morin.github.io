object Canvas
object CanvasContext
thing DisplayBrowser includes Display , ControllerMsgs {
	provided port vctrl {
		sends velocityval15 sends velocitydxdy sends positionval16 sends positionyx
	}
	readonly property SCALE : UInt8 = 5
	property XFRAMESIZE : UInt16
	property YFRAMESIZE : UInt16
	property Buffer : CanvasContext
	property BufferCanvas : Canvas
	property Display : CanvasContext
	function initDisplay(xsize : UInt8, ysize : UInt8) do
		XFRAMESIZE = xsize
		YFRAMESIZE = ysize
		`
      document.body.style.backgroundColor = "gray";

      /* Create buffer canvas */
      var buffer = document.createElement("canvas");
      buffer.setAttribute("width", ` & XFRAMESIZE & `);
      buffer.setAttribute("height", ` & YFRAMESIZE & `);
      buffer.style.imageRendering = "pixelated";
      ` & BufferCanvas & ` = buffer;

      var bufferCtx = buffer.getContext("2d");
      bufferCtx.imageSmoothingEnabled = false;
      bufferCtx.mozImageSmoothingEnabled = false;
      bufferCtx.webkitImageSmoothingEnabled = false;
      bufferCtx.msImageSmoothingEnabled = false;
      ` & Buffer & ` = bufferCtx;

      /* Create the display canvas */
      var display = document.createElement("canvas");
      display.setAttribute("width", ` & XFRAMESIZE * SCALE & `);
      display.setAttribute("height", ` & YFRAMESIZE * SCALE & `);

      var displayCtx = display.getContext("2d");
      displayCtx.imageSmoothingEnabled = false;
      displayCtx.mozImageSmoothingEnabled = false;
      displayCtx.webkitImageSmoothingEnabled = false;
      displayCtx.msImageSmoothingEnabled = false;

      ` & Display & ` = displayCtx;

      // Put it in the middle of the window
      display.style.position = "absolute";
      display.style.left = "50%";
      display.style.top = "50%";
      display.style.marginLeft = ` & -XFRAMESIZE / 2 * SCALE & `+"px";
      display.style.marginTop = ` & -YFRAMESIZE / 2 * SCALE & `+"px";
      display.style.cursor = "none";
      document.body.appendChild(display);

      // Add mouse over events
      display.addEventListener("mousemove", (e) => {
        var mouseX = e.offsetX/(` & XFRAMESIZE * SCALE & `); // [0,1]

        // TODO: Some hardcoded numbers
        var dispX = mouseX*10240; //XMAX
        var posX = (dispX-5120)*200/8406;
        posX = Math.max(-100, Math.min(100, posX));

        `
		do
			vctrl!positionval16(0xE0, 0xF0)
			vctrl!positionyx(`posX` as Int16, 0, 0x32)
		end
	`
      });
    `
		clearScreen()
	`
      document.addEventListener("keydown", (e) => {
        if (e.key == "ArrowLeft") {
          `
		do
			vctrl!velocityval15(0x41, 0x8D)
			vctrl!velocitydxdy(0, 0xC1, -8)
		end
	`
        } else if (e.key == "ArrowRight") {
          `
		do
			vctrl!velocityval15(0x3D, 0xF2)
			vctrl!velocitydxdy(0, 0x28, 8)
		end
	`
        }
      });
      document.addEventListener("keyup", (e) => {
        if (e.key == "ArrowLeft" || e.key == "ArrowRight") {
          `
		do
			vctrl!velocityval15(0x6C, 0xE9)
			vctrl!velocitydxdy(0, 0x0A, 0)
		end
	`
        }
      });
    `
	`
      window.setPadPosition = (x) => { //[-100, 100]
        `
		do
			vctrl!positionyx(`x` as Int16, 0, 0x90)
			vctrl!positionval16(0x60, 0xEF)
		end
	`
      };
    `
	end
	function destroyDisplay() do
	end
	function updateDisplay() do
		`` & Display & `.drawImage(` & BufferCanvas & `, 0, 0, ` & XFRAMESIZE * SCALE & `, ` & YFRAMESIZE * SCALE & `);`
	end
	function clearScreen() do
		setColor(0, 0, 0)
		fillRect(0, 0, XFRAMESIZE, YFRAMESIZE)
		updateDisplay()
	end
	function setColor(r : UInt8, g : UInt8, b : UInt8) do
		`
      ` & Buffer & `.strokeStyle = "rgb("+` & r & `+", "+` & g & `+", "+` & b & `+")";
      ` & Buffer & `.fillStyle = "rgb("+` & r & `+", "+` & g & `+", "+` & b & `+")";
    `
	end
	function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`
      var xr = Math.floor(` & x & `);
      var yr = Math.floor(` & y & `);
      var wr = Math.floor(` & width & `);
      var hr = Math.floor(` & height & `);
      ` & Buffer & `.fillRect(xr, yr, wr, 1);
      ` & Buffer & `.fillRect(xr, yr+hr-1, wr, 1);
      ` & Buffer & `.fillRect(xr, yr, 1, hr);
      ` & Buffer & `.fillRect(xr+wr-1, yr, 1, hr);
    `
	end
	function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do
		`
      var xr = Math.floor(` & x & `);
      var yr = Math.floor(` & y & `);
      var wr = Math.floor(` & width & `);
      var hr = Math.floor(` & height & `);
      ` & Buffer & `.fillRect(xr, yr, wr, hr);
    `
	end
}
object Synth
thing SoundControllerBrowser includes Sound @js_include `https://cdnjs.cloudflare.com/ajax/libs/tone/0.10.0/Tone.min.js` {
	readonly property synth : Synth = `new Tone.Synth().toMaster()` as Synth
	function tone(f : UInt16, t : UInt16) do
		`` & synth & `.triggerAttackRelease(` & f & `, ` & t & `/1000)`
	end
}
thing BreakoutGameBrowser includes DefaultBreakoutGame {
	function quit() println "done!"
	function timestamp() : UInt32 return `Date.now()` as UInt32
	function usedMemory() : UInt32 do
		return -1
	end
}
thing fragment TimerMsgs @stl {
	message timer_cancel(id : UInt8, val23 : Byte @noise, val1 : Byte @noise)
	message timer_start(val0 : Byte @noise, time : UInt16, val25 : Byte @noise, id : UInt8)
	message timer_timeout(val2 : Byte @noise, val24 : Byte @noise, id : UInt8)
}
thing fragment Timer includes TimerMsgs @stl {
	provided port timer {
		sends timer_timeout receives timer_start receives timer_cancel
	}
}
object JSArray
thing TimerJS includes Timer @stl {
	property Timeouts : JSArray = `{}` as JSArray
	function startTimer(id : UInt8, delay : UInt16) do
		`
      if (` & Timeouts & `[` & id & `] != undefined) {
        `
		cancel(id)
		`
      }
      
      ` & Timeouts & `[` & id & `] = setTimeout(() => {
        `
		timer!timer_timeout(0x7C, 0x0C, id)
		`
        ` & Timeouts & `[` & id & `] = undefined;
      }, ` & delay & `);
    `
	end
	function cancel(id : UInt8) do
		`
        if (` & Timeouts & `[` & id & `] != undefined) {
          clearTimeout(` & Timeouts & `[` & id & `]);
          ` & Timeouts & `[` & id & `] = undefined;
        }
      `
	end
	statechart SoftTimer init default {
		state default {
			internal
			event m : timer?timer_start
			guard m.time > 0
			action startTimer(m.id, m.time)
			internal
			event m : timer?timer_start
			guard m.time == 0
			action timer!timer_timeout(0x65, 0xC9, m.id)
			internal cancel
			event m : timer?timer_cancel
			action cancel(m.id)
		}
	}
}
object DriftLess
object TimerMap @go_type `map[uint8]*time.Timer`
thing fragment DisplayMsgs {
	message create_(val40 : Byte @noise)
	message drawRectheight(height : UInt8, val44 : Byte @noise)
	message clearval3(val3 : Byte @noise, val49 : Byte @noise)
	message update_(val34 : Byte @noise)
	message drawThingMLval9(val32 : Byte @noise, val9 : Byte @noise)
	message fillRectheightxval7(val46 : Byte @noise, height : UInt8, x : UInt8, val7 : Byte @noise)
	message clear_(val48 : Byte @noise)
	message displayReady_(val38 : Byte @noise)
	message createxsizeysizeval10(xsize : UInt8, ysize : UInt8, val41 : Byte @noise, val10 : Byte @noise)
	message drawThingMLxy(y : UInt8, x : UInt8, val33 : Byte @noise)
	message fillRectywidth(width : UInt8, val47 : Byte @noise, y : UInt8)
	message drawIntegervdigitsscaleval8y(val37 : Byte @noise, scale : UInt8, y : UInt8, val8 : Byte @noise, v : Int16, digits : UInt8)
	message setColorbrval4(b : UInt8, val42 : Byte @noise, r : UInt8, val4 : Byte @noise)
	message displayError_(val26 : Byte @noise)
	message updateval12(val35 : Byte @noise, val12 : Byte @noise)
	message displayErrorval14(val14 : Byte @noise, val27 : Byte @noise)
	message displayReadyval13(val39 : Byte @noise, val13 : Byte @noise)
	message drawRectyval6xwidth(y : UInt8, x : UInt8, val6 : Byte @noise, val45 : Byte @noise, width : UInt8)
	message setColorg(val43 : Byte @noise, g : UInt8)
	message drawIntegerx(x : UInt8, val36 : Byte @noise)
	message destroy_(val30 : Byte @noise)
	message setBGColorb(val28 : Byte @noise, b : UInt8)
	message setBGColorval5rg(val29 : Byte @noise, g : UInt8, r : UInt8, val5 : Byte @noise)
	message destroyval11(val11 : Byte @noise, val31 : Byte @noise)
}
thing fragment Display includes DisplayMsgs {
	provided port display {
		sends displayReady_ sends displayReadyval13 sends displayError_ sends displayErrorval14 receives create_ receives createxsizeysizeval10 receives destroy_ receives destroyval11 receives update_ receives updateval12 receives clear_ receives clearval3 receives setColorbrval4 receives setColorg receives setBGColorb receives setBGColorval5rg receives drawRectheight receives drawRectyval6xwidth receives fillRectheightxval7 receives fillRectywidth receives drawIntegerx receives drawIntegervdigitsscaleval8y receives drawThingMLval9 receives drawThingMLxy
	}
	property bg_r : UInt8 = 0
	property bg_g : UInt8 = 0
	property bg_b : UInt8 = 0
	property fg_r : UInt8 = 0
	property fg_g : UInt8 = 0
	property fg_b : UInt8 = 0
	abstract function initDisplay(xsize : UInt8, ysize : UInt8)

	abstract function destroyDisplay()

	abstract function updateDisplay()

	abstract function clearScreen() @abstract `true`

	abstract function setColor(r : UInt8, g : UInt8, b : UInt8)

	abstract function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)

	abstract function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)

	function drawDigit(x : UInt8, y : UInt8, d : UInt8, size : UInt8) do
		if (d < 1) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 2) do
			fillRect(x + size, y, size, 5 * size)
		end
		else if (d < 3) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 4) do
			fillRect(x, y, size * 3, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x + size, y + 2 * size, 2 * size, size)
		end
		else if (d < 5) do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 6) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 3 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 7) do
			fillRect(x, y, size * 3, size)
			fillRect(x, y, size, 5 * size)
			fillRect(x, y + 2 * size, 3 * size, size)
			fillRect(x + 2 * size, y + 2 * size, size, 3 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
		end
		else if (d < 8) do
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
		end
		else if (d < 9) do
			fillRect(x, y, size, 5 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
		else do
			fillRect(x, y, size, 3 * size)
			fillRect(x, y, 3 * size, size)
			fillRect(x + 2 * size, y, size, 5 * size)
			fillRect(x, y + 4 * size, 3 * size, size)
			fillRect(x, y + 2 * size, 3 * size, size)
		end
	end
	function drawThingML(px : Int16, py : Int16) do
		setColor(255, 255, 255)
		fillRect(px, py, 108, 13)
		var x : Int16 = px + 1
		var y : Int16 = py + 1
		setColor(80, 80, 80)
		fillRect(x + 0, y + 0, 12, 2)
		fillRect(x + 5, y + 0, 2, 11)
		fillRect(x + 18, y + 0, 2, 11)
		fillRect(x + 27, y + 0, 2, 11)
		fillRect(x + 18, y + 5, 11, 2)
		fillRect(x + 36, y + 0, 2, 11)
		fillRect(x + 44, y + 0, 2, 11)
		fillRect(x + 46, y + 1, 1, 3)
		fillRect(x + 47, y + 2, 1, 3)
		fillRect(x + 48, y + 3, 1, 3)
		fillRect(x + 49, y + 4, 1, 3)
		fillRect(x + 50, y + 5, 1, 3)
		fillRect(x + 51, y + 6, 1, 3)
		fillRect(x + 52, y + 7, 1, 3)
		fillRect(x + 53, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 2, 11)
		fillRect(x + 62, y + 0, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 62, y + 9, 12, 2)
		fillRect(x + 69, y + 5, 5, 2)
		fillRect(x + 72, y + 7, 2, 2)
		setColor(232, 141, 10)
		fillRect(x + 80, y + 0, 11, 2)
		fillRect(x + 80, y + 0, 2, 11)
		fillRect(x + 85, y + 0, 2, 11)
		fillRect(x + 89, y + 0, 2, 11)
		fillRect(x + 95, y + 0, 2, 11)
		fillRect(x + 95, y + 9, 11, 2)
	end
	function drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8) do
		clearInteger(x, y, digits, scale)
		var val : Int16 = v
		var d : UInt8 = digits
		while (d > 0) do
			drawDigit(x + (d - 1) * 4 * scale, y, val % 10, scale)
			val = val / 10
			d = d - 1
		end
	end
	function clearInteger(x : UInt8, y : UInt8, digits : UInt8, scale : UInt8) do
		setColor(bg_r, bg_g, bg_b)
		fillRect(x, y, (digits * 4 - 1) * scale, 5 * scale)
		setColor(fg_r, fg_g, fg_b)
	end
	statechart SC init Wait {
		state Wait {
			property display_create_xsize : UInt8
			property display_create_ysize : UInt8
			property display_create_val10 : Byte
			property received_display_create_ : Boolean
			property received_display_createxsizeysizeval10 : Boolean
			internal
			event e : display?create_
			guard not received_display_createxsizeysizeval10
			action do
				received_display_create_ = true
			end
			internal
			event e : display?createxsizeysizeval10
			guard not received_display_create_
			action do
				received_display_createxsizeysizeval10 = true
				display_create_xsize = e.xsize
				display_create_ysize = e.ysize
				display_create_val10 = e.val10
			end
			transition -> Running
			event e : display?create_
			guard received_display_createxsizeysizeval10
			action do
				initDisplay(display_create_xsize, display_create_ysize)
				received_display_create_ = false
				received_display_createxsizeysizeval10 = false
			end
			transition -> Running
			event e : display?createxsizeysizeval10
			guard received_display_create_
			action do
				display_create_xsize = e.xsize
				display_create_ysize = e.ysize
				display_create_val10 = e.val10
				initDisplay(e.xsize, e.ysize)
				received_display_createxsizeysizeval10 = false
				received_display_create_ = false
			end
		}
		state Running {
			property display_setColor_b : UInt8
			property display_setColor_r : UInt8
			property display_setColor_val4 : Byte
			property display_setColor_g : UInt8
			property received_display_setColorbrval4 : Boolean
			property received_display_setColorg : Boolean
			property display_setBGColor_b : UInt8
			property display_setBGColor_val5 : Byte
			property display_setBGColor_r : UInt8
			property display_setBGColor_g : UInt8
			property received_display_setBGColorb : Boolean
			property received_display_setBGColorval5rg : Boolean
			property display_clear_val3 : Byte
			property received_display_clear_ : Boolean
			property received_display_clearval3 : Boolean
			property display_drawRect_height : UInt8
			property display_drawRect_y : UInt8
			property display_drawRect_val6 : Byte
			property display_drawRect_x : UInt8
			property display_drawRect_width : UInt8
			property received_display_drawRectheight : Boolean
			property received_display_drawRectyval6xwidth : Boolean
			property display_fillRect_height : UInt8
			property display_fillRect_x : UInt8
			property display_fillRect_val7 : Byte
			property display_fillRect_y : UInt8
			property display_fillRect_width : UInt8
			property received_display_fillRectheightxval7 : Boolean
			property received_display_fillRectywidth : Boolean
			property display_update_val12 : Byte
			property received_display_update_ : Boolean
			property received_display_updateval12 : Boolean
			property display_drawInteger_x : UInt8
			property display_drawInteger_v : Int16
			property display_drawInteger_digits : UInt8
			property display_drawInteger_scale : UInt8
			property display_drawInteger_val8 : Byte
			property display_drawInteger_y : UInt8
			property received_display_drawIntegerx : Boolean
			property received_display_drawIntegervdigitsscaleval8y : Boolean
			property display_drawThingML_val9 : Byte
			property display_drawThingML_x : UInt8
			property display_drawThingML_y : UInt8
			property received_display_drawThingMLval9 : Boolean
			property received_display_drawThingMLxy : Boolean
			property display_destroy_val11 : Byte
			property received_display_destroy_ : Boolean
			property received_display_destroyval11 : Boolean
			on entry do
				do
					display!displayReady_(0xE5)
					display!displayReadyval13(0xB6, 0xE9)
				end
			end
			internal
			event e : display?setColorbrval4
			action do
				received_display_setColorbrval4 = true
				display_setColor_b = e.b
				display_setColor_r = e.r
				display_setColor_val4 = e.val4
				if (received_display_setColorg) do
					do
						fg_r = display_setColor_r
						fg_g = display_setColor_g
						fg_b = display_setColor_b
						setColor(display_setColor_r, display_setColor_g, display_setColor_b)
					end
					do
						received_display_setColorbrval4 = false
						received_display_setColorg = false
					end
				end
			end
			internal
			event e : display?setColorg
			action do
				received_display_setColorg = true
				display_setColor_g = e.g
				if (received_display_setColorbrval4) do
					do
						fg_r = display_setColor_r
						fg_g = display_setColor_g
						fg_b = display_setColor_b
						setColor(display_setColor_r, display_setColor_g, display_setColor_b)
					end
					do
						received_display_setColorg = false
						received_display_setColorbrval4 = false
					end
				end
			end
			internal
			event e : display?setBGColorb
			action do
				received_display_setBGColorb = true
				display_setBGColor_b = e.b
				if (received_display_setBGColorval5rg) do
					do
						bg_r = display_setBGColor_r
						bg_g = display_setBGColor_g
						bg_b = display_setBGColor_b
					end
					do
						received_display_setBGColorb = false
						received_display_setBGColorval5rg = false
					end
				end
			end
			internal
			event e : display?setBGColorval5rg
			action do
				received_display_setBGColorval5rg = true
				display_setBGColor_val5 = e.val5
				display_setBGColor_r = e.r
				display_setBGColor_g = e.g
				if (received_display_setBGColorb) do
					do
						bg_r = display_setBGColor_r
						bg_g = display_setBGColor_g
						bg_b = display_setBGColor_b
					end
					do
						received_display_setBGColorval5rg = false
						received_display_setBGColorb = false
					end
				end
			end
			internal
			event e : display?clear_
			action do
				received_display_clear_ = true
				if (received_display_clearval3) do
					clearScreen()
					do
						received_display_clear_ = false
						received_display_clearval3 = false
					end
				end
			end
			internal
			event e : display?clearval3
			action do
				received_display_clearval3 = true
				display_clear_val3 = e.val3
				if (received_display_clear_) do
					clearScreen()
					do
						received_display_clearval3 = false
						received_display_clear_ = false
					end
				end
			end
			internal
			event e : display?drawRectheight
			action do
				received_display_drawRectheight = true
				display_drawRect_height = e.height
				if (received_display_drawRectyval6xwidth) do
					drawRect(display_drawRect_x, display_drawRect_y, display_drawRect_width, display_drawRect_height)
					do
						received_display_drawRectheight = false
						received_display_drawRectyval6xwidth = false
					end
				end
			end
			internal
			event e : display?drawRectyval6xwidth
			action do
				received_display_drawRectyval6xwidth = true
				display_drawRect_y = e.y
				display_drawRect_val6 = e.val6
				display_drawRect_x = e.x
				display_drawRect_width = e.width
				if (received_display_drawRectheight) do
					drawRect(display_drawRect_x, display_drawRect_y, display_drawRect_width, display_drawRect_height)
					do
						received_display_drawRectyval6xwidth = false
						received_display_drawRectheight = false
					end
				end
			end
			internal
			event e : display?fillRectheightxval7
			action do
				received_display_fillRectheightxval7 = true
				display_fillRect_height = e.height
				display_fillRect_x = e.x
				display_fillRect_val7 = e.val7
				if (received_display_fillRectywidth) do
					fillRect(display_fillRect_x, display_fillRect_y, display_fillRect_width, display_fillRect_height)
					do
						received_display_fillRectheightxval7 = false
						received_display_fillRectywidth = false
					end
				end
			end
			internal
			event e : display?fillRectywidth
			action do
				received_display_fillRectywidth = true
				display_fillRect_y = e.y
				display_fillRect_width = e.width
				if (received_display_fillRectheightxval7) do
					fillRect(display_fillRect_x, display_fillRect_y, display_fillRect_width, display_fillRect_height)
					do
						received_display_fillRectywidth = false
						received_display_fillRectheightxval7 = false
					end
				end
			end
			internal
			event e : display?update_
			action do
				received_display_update_ = true
				if (received_display_updateval12) do
					updateDisplay()
					do
						received_display_update_ = false
						received_display_updateval12 = false
					end
				end
			end
			internal
			event e : display?updateval12
			action do
				received_display_updateval12 = true
				display_update_val12 = e.val12
				if (received_display_update_) do
					updateDisplay()
					do
						received_display_updateval12 = false
						received_display_update_ = false
					end
				end
			end
			internal
			event e : display?drawIntegerx
			action do
				received_display_drawIntegerx = true
				display_drawInteger_x = e.x
				if (received_display_drawIntegervdigitsscaleval8y) do
					drawInteger(display_drawInteger_x, display_drawInteger_y, display_drawInteger_v, display_drawInteger_digits, display_drawInteger_scale)
					do
						received_display_drawIntegerx = false
						received_display_drawIntegervdigitsscaleval8y = false
					end
				end
			end
			internal
			event e : display?drawIntegervdigitsscaleval8y
			action do
				received_display_drawIntegervdigitsscaleval8y = true
				display_drawInteger_v = e.v
				display_drawInteger_digits = e.digits
				display_drawInteger_scale = e.scale
				display_drawInteger_val8 = e.val8
				display_drawInteger_y = e.y
				if (received_display_drawIntegerx) do
					drawInteger(display_drawInteger_x, display_drawInteger_y, display_drawInteger_v, display_drawInteger_digits, display_drawInteger_scale)
					do
						received_display_drawIntegervdigitsscaleval8y = false
						received_display_drawIntegerx = false
					end
				end
			end
			internal
			event e : display?drawThingMLval9
			action do
				received_display_drawThingMLval9 = true
				display_drawThingML_val9 = e.val9
				if (received_display_drawThingMLxy) do
					drawThingML(display_drawThingML_x, display_drawThingML_y)
					do
						received_display_drawThingMLval9 = false
						received_display_drawThingMLxy = false
					end
				end
			end
			internal
			event e : display?drawThingMLxy
			action do
				received_display_drawThingMLxy = true
				display_drawThingML_x = e.x
				display_drawThingML_y = e.y
				if (received_display_drawThingMLval9) do
					drawThingML(display_drawThingML_x, display_drawThingML_y)
					do
						received_display_drawThingMLxy = false
						received_display_drawThingMLval9 = false
					end
				end
			end
			internal
			event display?destroy_
			guard not received_display_destroyval11
			action do
				received_display_destroy_ = true
			end
			internal
			event display?destroyval11
			guard not received_display_destroy_
			action do
				received_display_destroyval11 = true
			end
			transition -> Destroyed
			event display?destroy_
			guard received_display_destroyval11
			action do
				destroyDisplay()
				received_display_destroy_ = false
				received_display_destroyval11 = false
			end
			transition -> Destroyed
			event display?destroyval11
			guard received_display_destroy_
			action do
				destroyDisplay()
				received_display_destroyval11 = false
				received_display_destroy_ = false
			end
		}
		final state Destroyed {
		}
	}
}
thing fragment ControllerMsgs {
	message positionyx(x : Int16, y : Int16, val51 : Byte @noise)
	message positionval16(val50 : Byte @noise, val16 : Byte @noise)
	message velocityval15(val52 : Byte @noise, val15 : Byte @noise)
	message velocitydxdy(dy : Int16, val53 : Byte @noise, dx : Int16)
}
thing fragment Controller includes ControllerMsgs {
	provided port controls {
		sends positionval16 sends positionyx
	}
}
thing fragment TimerController includes Controller , TimerMsgs {
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	readonly property XMAX : Int16 = 100
	readonly property YMAX : Int16 = 100
	readonly property XMIN : Int16 = -100
	readonly property YMIN : Int16 = -100
	property posX : Int16 = 0
	property posY : Int16 = 0
	property dx : Int16 = 0
	property dy : Int16 = 0
}
thing VelocityController includes TimerController {
	required port ctrl_in {
		receives velocityval15 receives velocitydxdy receives positionval16 receives positionyx
	}
	readonly property timerID : UInt8 = 4
	statechart SC init Running {
		property ctrl_in_velocity_val15 : Byte
		property ctrl_in_velocity_dx : Int16
		property ctrl_in_velocity_dy : Int16
		property received_ctrl_in_velocityval15 : Boolean
		property received_ctrl_in_velocitydxdy : Boolean
		state Running {
			property ctrl_in_position_val16 : Byte
			property ctrl_in_position_y : Int16
			property ctrl_in_position_x : Int16
			property received_ctrl_in_positionval16 : Boolean
			property received_ctrl_in_positionyx : Boolean
			on entry clock!timer_start(0x58, 50, 0x4A, timerID)
			internal
			event e : ctrl_in?positionval16
			action do
				received_ctrl_in_positionval16 = true
				ctrl_in_position_val16 = e.val16
				if (received_ctrl_in_positionyx) do
					do
						posX = ctrl_in_position_x
						posY = ctrl_in_position_y
						if (posX < XMIN) posX = XMIN
						else if (posX > XMAX) posX = XMAX
						if (posY < YMIN) posY = YMIN
						else if (posY > YMAX) posY = YMAX
						do
							controls!positionval16(0x1C, 0x28)
							controls!positionyx(posX, posY, 0xCC)
						end
					end
					do
						received_ctrl_in_positionval16 = false
						received_ctrl_in_positionyx = false
					end
				end
			end
			internal
			event e : ctrl_in?positionyx
			action do
				received_ctrl_in_positionyx = true
				ctrl_in_position_y = e.y
				ctrl_in_position_x = e.x
				if (received_ctrl_in_positionval16) do
					do
						posX = ctrl_in_position_x
						posY = ctrl_in_position_y
						if (posX < XMIN) posX = XMIN
						else if (posX > XMAX) posX = XMAX
						if (posY < YMIN) posY = YMIN
						else if (posY > YMAX) posY = YMAX
						do
							controls!positionyx(posX, posY, 0xC3)
							controls!positionval16(0x86, 0x28)
						end
					end
					do
						received_ctrl_in_positionyx = false
						received_ctrl_in_positionval16 = false
					end
				end
			end
			transition -> Running
			event e : clock?timer_timeout
			guard e.id == timerID
			action do
				posX = posX + dx
				posY = posY + dy
				if (posX < XMIN) posX = XMIN
				else if (posX > XMAX) posX = XMAX
				if (posY < YMIN) posY = YMIN
				else if (posY > YMAX) posY = YMAX
				do
					controls!positionyx(posX, posY, 0x07)
					controls!positionval16(0x6A, 0x4B)
				end
			end
		}
		internal
		event e : ctrl_in?velocityval15
		action do
			received_ctrl_in_velocityval15 = true
			ctrl_in_velocity_val15 = e.val15
			if (received_ctrl_in_velocitydxdy) do
				do
					dx = ctrl_in_velocity_dx
					dy = ctrl_in_velocity_dy
				end
				do
					received_ctrl_in_velocityval15 = false
					received_ctrl_in_velocitydxdy = false
				end
			end
		end
		internal
		event e : ctrl_in?velocitydxdy
		action do
			received_ctrl_in_velocitydxdy = true
			ctrl_in_velocity_dx = e.dx
			ctrl_in_velocity_dy = e.dy
			if (received_ctrl_in_velocityval15) do
				do
					dx = ctrl_in_velocity_dx
					dy = ctrl_in_velocity_dy
				end
				do
					received_ctrl_in_velocitydxdy = false
					received_ctrl_in_velocityval15 = false
				end
			end
		end
	}
}
thing fragment IAControllerMsg {
	message updateIAballypadyballxpadxval17(padx : Int16, val57 : Byte @noise, ballx : Int16, pady : Int16, val17 : Byte @noise, bally : Int16)
	message hitBall_(val58 : Byte @noise)
	message updateIA_(val56 : Byte @noise)
	message missBallval19(val19 : Byte @noise, val55 : Byte @noise)
	message missBall_(val54 : Byte @noise)
	message hitBallval18(val59 : Byte @noise, val18 : Byte @noise)
}
thing fragment SoundMsgs {
	message tonetimeval20(val60 : Byte @noise, val20 : Byte @noise, time : UInt16)
	message tonefreq(val61 : Byte @noise, freq : UInt16)
}
thing fragment Sound includes SoundMsgs {
	provided port sound {
		receives tonetimeval20 receives tonefreq
	}
	abstract function tone(f : UInt16, t : UInt16) @abstract `true`

	statechart behavior init INIT {
		state INIT {
			property sound_tone_time : UInt16
			property sound_tone_val20 : Byte
			property sound_tone_freq : UInt16
			property received_sound_tonetimeval20 : Boolean
			property received_sound_tonefreq : Boolean
			internal
			event t : sound?tonetimeval20
			action do
				received_sound_tonetimeval20 = true
				sound_tone_time = t.time
				sound_tone_val20 = t.val20
				if (received_sound_tonefreq) do
					tone(sound_tone_freq, sound_tone_time)
					do
						received_sound_tonetimeval20 = false
						received_sound_tonefreq = false
					end
				end
			end
			internal
			event t : sound?tonefreq
			action do
				received_sound_tonefreq = true
				sound_tone_freq = t.freq
				if (received_sound_tonetimeval20) do
					tone(sound_tone_freq, sound_tone_time)
					do
						received_sound_tonefreq = false
						received_sound_tonetimeval20 = false
					end
				end
			end
		}
	}
}
thing fragment DefaultBreakoutGame includes BreakoutGame {
	function unsetBit(variable : UInt8, bit : UInt8) : UInt8 return (`` & variable & ` & ~(1 << ` & bit & `)`) as UInt8
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as Byte
	@java_type `byte`
	@c_type `uint8_t`
	@go_type `uint8`
	{
	LOW = 0x00
	HIGH = 0x01
}
thing fragment BreakoutGame includes TimerMsgs , DisplayMsgs , SoundMsgs , ControllerMsgs , IAControllerMsg {
	message nextLevelval22(val63 : Byte @noise, val22 : Byte @noise)
	message nextLevel_(val62 : Byte @noise)
	message lostBall_(val64 : Byte @noise)
	message lostBallval21(val21 : Byte @noise, val65 : Byte @noise)
	required port clock {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	optional required port sound @sync_send `true` {
		sends tonetimeval20 sends tonefreq
	}
	optional required port display @sync_send `true` {
		sends create_ sends createxsizeysizeval10 sends fillRectheightxval7 sends fillRectywidth sends drawRectheight sends drawRectyval6xwidth sends clear_ sends clearval3 sends setColorbrval4 sends setColorg sends setBGColorb sends setBGColorval5rg sends drawIntegerx sends drawIntegervdigitsscaleval8y sends update_ sends updateval12 sends drawThingMLval9 sends drawThingMLxy receives displayReady_ receives displayReadyval13 receives displayError_ receives displayErrorval14
	}
	required port controller {
		receives positionval16 receives positionyx
	}
	provided port ia {
		sends updateIA_ sends updateIAballypadyballxpadxval17 sends lostBall_ sends lostBallval21 sends hitBall_ sends hitBallval18
	}
	internal port game {
		sends lostBall_ sends lostBallval21 sends nextLevel_ sends nextLevelval22 receives lostBall_ receives lostBallval21 receives nextLevel_ receives nextLevelval22
	}
	optional required port req_game {
		sends lostBall_ sends lostBallval21 sends nextLevel_ sends nextLevelval22
	}
	provided port pro_game {
		receives lostBall_ receives lostBallval21 receives nextLevel_ receives nextLevelval22
	}
	property lastTimestamp : UInt32 = 0
	property counter : UInt8 = 0
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128
	readonly property SCALE : Int16 = 64
	readonly property XMAX : Int16 = XDISPSIZE as Int16 * SCALE
	readonly property YMAX : Int16 = YDISPSIZE as Int16 * SCALE
	property TOP : Int16 = 14 * SCALE
	property BOTTOM : Int16 = YMAX + 8 * SCALE
	property LEFT : Int16 = 1 * SCALE
	property RIGHT : Int16 = XMAX - 1 * SCALE
	property br : Int16 = 3 * SCALE
	property bx : Int16 = XMAX / 2
	property by : Int16 = YMAX
	property dx : Int16 = XMAX / 98
	property dy : Int16 = -XMAX / 65
	property padx : Int16 = YMAX / 2
	property pady : Int16 = YMAX - 6 * SCALE
	property padlen : Int16 = 25 * SCALE
	property prevBX : Int16 = -1
	property prevBY : Int16 = -1
	property bgcolor : UInt8 [ 3 ]
	property fgcolor : UInt8 [ 3 ]
	property period : UInt16 = 33
	readonly property tone1 : UInt16 = 440
	readonly property tone2 : UInt16 = 880
	readonly property tone_duration : UInt16 = 50
	property prevPX : Int16 = -1
	property prevPY : Int16 = -1
	readonly property BRICK_ROWS : UInt8 = 5
	readonly property BRICK_HEIGHT : UInt8 = 9
	property bricks : UInt8 [ BRICK_ROWS ]
	property score : Int16 = 0
	property lives : UInt8 = 3
	property level : UInt8 = 1
	abstract function quit()

	abstract function timestamp() : UInt32

	abstract function usedMemory() : UInt32

	function log(logMem : Boolean) do
		var ts : UInt32
		if (lastTimestamp == 0) do
			ts = 0
			lastTimestamp = timestamp()
		end
		else do
			var t : UInt32 = timestamp()
			ts = t - lastTimestamp
			lastTimestamp = t
		end
		println "ts:" , ts , ",lives:" , lives , ",score:" , score , ",level:" , level , ",bx:" , bx , ",by:" , by , ",padx:" , padx
		if (counter == 0 or logMem) println "#usedMem:" , usedMemory()
		counter ++
		if (counter == 10) counter = 0
	end
	function initColors() do
		bgcolor[0] = 53
		bgcolor[1] = 40
		bgcolor[2] = 120
		fgcolor[0] = 107
		fgcolor[1] = 94
		fgcolor[2] = 174
		do
			display!setBGColorval5rg(0x51, bgcolor [1], bgcolor [0], 0x5E)
			display!setBGColorb(0xDC, bgcolor [2])
		end
		do
			display!setColorg(0xAA, fgcolor [1])
			display!setColorbrval4(fgcolor [2], 0xF0, fgcolor [0], 0x81)
		end
	end
	function resetBall() do
		bx = padx - br / SCALE
		by = pady - br / SCALE
		dx = (padx + prevBX + prevBY) % 300 - 150
		if (dy > 0) dy = -dy
		prevBX = -1
		prevBY = -1
	end
	function eraseBall() do
		var bs : Int16 = (br * 2) / SCALE
		if (prevBX > 0) do
			do
				display!setColorbrval4(bgcolor [2], 0x6D, bgcolor [0], 0xDD)
				display!setColorg(0x78, bgcolor [1])
			end
			do
				display!fillRectheightxval7(0x66, bs as UInt8, prevBX as UInt8, 0x1D)
				display!fillRectywidth(bs as UInt8, 0x10, prevBY as UInt8)
			end
		end
		prevBX = -1
		prevBY = -1
	end
	function drawBall() do
		var bs : Int16 = (br * 2) / SCALE
		eraseBall()
		prevBX = (bx - br) / SCALE
		prevBY = (by - br) / SCALE
		do
			display!setColorg(0xBE, 199)
			display!setColorbrval4(111, 0x8C, 183, 0x8A)
		end
		do
			display!fillRectywidth(bs as UInt8, 0x5D, prevBY as UInt8)
			display!fillRectheightxval7(0x13, bs as UInt8, prevBX as UInt8, 0xC5)
		end
	end
	function erasePad() do
		var ps : Int16 = padlen / SCALE
		if (prevPX > 0) do
			do
				display!setColorbrval4(bgcolor [2], 0xC3, bgcolor [0], 0x95)
				display!setColorg(0xA6, bgcolor [1])
			end
			do
				display!fillRectheightxval7(0x52, 4, prevPX as UInt8, 0xA8)
				display!fillRectywidth(ps as UInt8, 0xDB, prevPY as UInt8)
			end
		end
	end
	function drawPad() do
		var ps : Int16 = padlen / SCALE
		erasePad()
		prevPX = (padx - (padlen / 2)) / SCALE
		prevPY = pady / SCALE
		do
			display!setColorg(0x83, fgcolor [1])
			display!setColorbrval4(fgcolor [2], 0xC9, fgcolor [0], 0x0A)
		end
		do
			display!fillRectywidth(ps as UInt8, 0x7A, prevPY as UInt8)
			display!fillRectheightxval7(0x02, 4, prevPX as UInt8, 0x28)
		end
	end
	function drawCountDown(c : Int16) do
		do
			display!setColorg(0x21, fgcolor [1])
			display!setColorbrval4(fgcolor [2], 0x0A, fgcolor [0], 0xC2)
		end
		if (c > 0) do
			do
				display!setColorg(0x08, fgcolor [1])
				display!setColorbrval4(fgcolor [2], 0x73, fgcolor [0], 0x60)
			end
			do
				display!setBGColorb(0x71, bgcolor [2])
				display!setBGColorval5rg(0x44, bgcolor [1], bgcolor [0], 0x9F)
			end
			do
				display!drawIntegerx(80 - 6, 0xB1)
				display!drawIntegervdigitsscaleval8y(0xF2, 4, 90, 0x23, c, 1)
			end
		end
		else do
			do
				display!setColorg(0xB8, bgcolor [1])
				display!setColorbrval4(bgcolor [2], 0x5F, bgcolor [0], 0xE1)
			end
			do
				display!fillRectywidth(12, 0xC7, 90)
				display!fillRectheightxval7(0x07, 20, 80 - 6, 0xB1)
			end
		end
	end
	function drawWalls() do
		do
			display!setColorbrval4(fgcolor [2], 0x49, fgcolor [0], 0x73)
			display!setColorg(0xC5, fgcolor [1])
		end
		readonly var left : UInt8 = (LEFT / SCALE) as UInt8
		readonly var right : UInt8 = (RIGHT / SCALE) as UInt8
		readonly var top : UInt8 = (TOP / SCALE) as UInt8
		readonly var bottom : UInt8 = (BOTTOM / SCALE) as UInt8
		readonly var xcenter : UInt8 = ((RIGHT - LEFT) / SCALE) as UInt8
		readonly var ycenter : UInt8 = ((BOTTOM - TOP) / SCALE) as UInt8
		do
			display!fillRectywidth(xcenter + 1, 0xC8, top - 1)
			display!fillRectheightxval7(0x8E, 1, left - 1, 0xCE)
		end
		do
			display!fillRectheightxval7(0xF7, 1, left - 1, 0x01)
			display!fillRectywidth(xcenter + 1, 0xF7, bottom)
		end
		do
			display!fillRectywidth(1, 0xFF, top)
			display!fillRectheightxval7(0xC7, ycenter, left - 1, 0x01)
		end
		do
			display!fillRectywidth(1, 0x3D, top)
			display!fillRectheightxval7(0x51, ycenter, right, 0xDA)
		end
	end
	function bitIsSet(variable : UInt8, bit : UInt8) : Boolean return (`((1 << ` & bit & `) & ` & variable & `) != 0`) as Boolean
	abstract function unsetBit(variable : UInt8, bit : UInt8) : UInt8

	function createBricks() do
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			bricks[y] = 0xFF
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					drawBrick(x, y)
				end
				x = x + 1
			end
			y = y + 1
		end
	end
	function bricksLeft() : UInt8 do
		var result : UInt8 = 0
		var y : UInt8 = 0
		while (y < BRICK_ROWS) do
			var x : UInt8 = 0
			while (x < 8) do
				if (bitIsSet(bricks [y], x)) do
					result = result + 1
				end
				x = x + 1
			end
			y = y + 1
		end
		return result
	end
	function drawBrick(x : UInt8, y : UInt8) do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		readonly var w : UInt8 = (((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8
		readonly var h : UInt8 = (BRICK_HEIGHT - 2) as UInt8
		do
			display!setColorbrval4(89, 0x71, 155, 0x85)
			display!setColorg(0xBF, 103)
		end
		do
			display!fillRectheightxval7(0x21, h, bx, 0x05)
			display!fillRectywidth(w, 0xA8, by)
		end
		do
			display!setColorg(0x3C, 56)
			display!setColorbrval4(43, 0xA6, 100, 0xBE)
		end
		do
			display!drawRectyval6xwidth(by, bx, 0xB4, 0xA7, w)
			display!drawRectheight(h, 0x2B)
		end
	end
	function removeBrick(x : UInt8, y : UInt8) do
		readonly var bx : UInt8 = ((LEFT + ((RIGHT - LEFT) / 8) * x as Int16) / SCALE + 1) as UInt8
		readonly var by : UInt8 = ((TOP + 20 * SCALE + BRICK_HEIGHT as Int16 * y as Int16 * SCALE) / SCALE + 1) as UInt8
		do
			display!setColorg(0x92, bgcolor [1])
			display!setColorbrval4(bgcolor [2], 0xE6, bgcolor [0], 0x24)
		end
		do
			display!fillRectheightxval7(0x8E, BRICK_HEIGHT - 2, bx, 0x46)
			display!fillRectywidth((((RIGHT - LEFT) / 8) / SCALE - 2) as UInt8, 0x09, by)
		end
		bricks[y] = unsetBit(bricks [y], x)
	end
	function collideBrick(xpos : Int16, ypos : Int16) : Boolean do
		var bry : Int16 = (ypos as Int16 - TOP - 20 * SCALE) / (BRICK_HEIGHT as Int16 * SCALE)
		var result : Boolean = false
		if (bry >= 0 and bry < BRICK_ROWS as Int16) do
			var brx : Int16 = (xpos as Int16 - LEFT) / ((RIGHT - LEFT) / 8)
			if (bitIsSet(bricks [bry], brx as UInt8)) do
				removeBrick(brx as UInt8, bry as UInt8)
				result = true
			end
		end
		return result
	end
	function drawLevel() do
		do
			display!setColorbrval4(130, 0x40, 158, 0x7B)
			display!setColorg(0x60, 209)
		end
		do
			display!setBGColorb(0xEB, fgcolor [2])
			display!setBGColorval5rg(0x64, fgcolor [1], fgcolor [0], 0x13)
		end
		do
			display!setColorbrval4(bgcolor [2], 0xB9, bgcolor [0], 0x8B)
			display!setColorg(0x6A, bgcolor [1])
		end
		do
			display!drawIntegervdigitsscaleval8y(0xC6, 2, 2, 0x9C, level as Int16, 2)
			display!drawIntegerx(6, 0x0B)
		end
	end
	function incrementScore(diff : Int8) do
		score = score + diff as Int16
		if (score < 0) score = 0
		drawScore()
	end
	function drawScore() do
		do
			display!setColorbrval4(130, 0x3E, 158, 0x93)
			display!setColorg(0xB6, 209)
		end
		do
			display!setBGColorval5rg(0x2C, fgcolor [1], fgcolor [0], 0xF4)
			display!setBGColorb(0x91, fgcolor [2])
		end
		do
			display!drawIntegerx(58, 0x71)
			display!drawIntegervdigitsscaleval8y(0x74, 2, 2, 0x34, score, 5)
		end
	end
	function drawLives() do
		do
			display!setColorg(0xD4, fgcolor [1])
			display!setColorbrval4(fgcolor [2], 0x78, fgcolor [0], 0x46)
		end
		do
			display!fillRectheightxval7(0x9A, 6, 124, 0x9F)
			display!fillRectywidth(24 + 6, 0x73, 4)
		end
		do
			display!setColorbrval4(111, 0xA3, 183, 0x30)
			display!setColorg(0x7C, 199)
		end
		var i : UInt8 = 0
		while (i < lives) do
			do
				display!fillRectheightxval7(0x4D, 6, 124 + (2 - i) * 12, 0x2F)
				display!fillRectywidth(6, 0x75, 4)
			end
			i = i + 1
		end
	end
	statechart SC init INIT {
		property controller_position_val16 : Byte
		property controller_position_y : Int16
		property controller_position_x : Int16
		property received_controller_positionval16 : Boolean
		property received_controller_positionyx : Boolean
		state INIT {
			property display_displayReady_val13 : Byte
			property received_display_displayReady_ : Boolean
			property received_display_displayReadyval13 : Boolean
			on entry do
				display!create_(0x10)
				display!createxsizeysizeval10(XDISPSIZE, YDISPSIZE, 0xCC, 0x00)
			end
			internal
			event display?displayReady_
			guard not received_display_displayReadyval13
			action do
				received_display_displayReady_ = true
			end
			internal
			event display?displayReadyval13
			guard not received_display_displayReady_
			action do
				received_display_displayReadyval13 = true
			end
			transition -> LAUNCH
			event display?displayReady_
			guard received_display_displayReadyval13
			action do
				do
					do
						display!clear_(0xF0)
						display!clearval3(0x02, 0x55)
					end
					initColors()
					do
						display!setColorg(0x44, bgcolor [1])
						display!setColorbrval4(bgcolor [2], 0x94, bgcolor [0], 0xAE)
					end
					do
						display!fillRectheightxval7(0x3A, YDISPSIZE, 0, 0x29)
						display!fillRectywidth(XDISPSIZE, 0x85, 0)
					end
					do
						display!setColorg(0x4D, fgcolor [1])
						display!setColorbrval4(fgcolor [2], 0x68, fgcolor [0], 0x7C)
					end
					do
						display!fillRectywidth(XDISPSIZE, 0x5F, 0)
						display!fillRectheightxval7(0x55, 14, 0, 0x2D)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
				received_display_displayReady_ = false
				received_display_displayReadyval13 = false
			end
			transition -> LAUNCH
			event display?displayReadyval13
			guard received_display_displayReady_
			action do
				do
					do
						display!clear_(0xDB)
						display!clearval3(0x02, 0x23)
					end
					initColors()
					do
						display!setColorbrval4(bgcolor [2], 0xCE, bgcolor [0], 0xAE)
						display!setColorg(0x0D, bgcolor [1])
					end
					do
						display!fillRectywidth(XDISPSIZE, 0x63, 0)
						display!fillRectheightxval7(0x19, YDISPSIZE, 0, 0x29)
					end
					do
						display!setColorg(0x43, fgcolor [1])
						display!setColorbrval4(fgcolor [2], 0xAE, fgcolor [0], 0x7C)
					end
					do
						display!fillRectheightxval7(0x08, 14, 0, 0x2D)
						display!fillRectywidth(XDISPSIZE, 0x6A, 0)
					end
					drawWalls()
					createBricks()
					drawLevel()
				end
				received_display_displayReadyval13 = false
				received_display_displayReady_ = false
			end
		}
		state LAUNCH {
			property countdown : UInt8
			on entry do
				clock!timer_start(0x7C, 33, 0xAB, 0)
				countdown = 30 * 3
				drawScore()
				drawLives()
				do
					display!update_(0x27)
					display!updateval12(0x13, 0x8A)
				end
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0 and countdown > 0
			action do
				clock!timer_start(0x20, 33, 0x7D, 0)
				drawPad()
				if ((countdown % 30) == 0) drawCountDown(countdown as Int16 / 30)
				countdown = countdown - 1
				do
					display!update_(0x9B)
					display!updateval12(0xFD, 0xF9)
				end
			end
			transition -> PLAY
			event t : clock?timer_timeout
			guard t.id == 0 and countdown == 0
			action do
				drawCountDown(0)
				resetBall()
				do
					display!updateval12(0x2D, 0x21)
					display!update_(0xFA)
				end
			end
		}
		state PLAY {
			property game_lostBall_val21 : Byte
			property received_game_lostBall_ : Boolean
			property received_game_lostBallval21 : Boolean
			property game_nextLevel_val22 : Byte
			property received_game_nextLevel_ : Boolean
			property received_game_nextLevelval22 : Boolean
			property pro_game_lostBall_val21 : Byte
			property received_pro_game_lostBall_ : Boolean
			property received_pro_game_lostBallval21 : Boolean
			property pro_game_nextLevel_val22 : Byte
			property received_pro_game_nextLevel_ : Boolean
			property received_pro_game_nextLevelval22 : Boolean
			on entry do
				clock!timer_start(0x3E, period, 0x07, 0)
			end
			internal
			event t : clock?timer_timeout
			guard t.id == 0
			action do
				bx = bx + dx
				by = by + dy
				var wl : Int16 = LEFT + br
				var wr : Int16 = RIGHT - br
				var wt : Int16 = TOP + br
				var wb : Int16 = BOTTOM - br
				if (bx < wl) do
					do
						sound!tonetimeval20(0x27, 0x34, tone_duration)
						sound!tonefreq(0xB5, tone2)
					end
					dx = -dx
					bx = 2 * wl - bx
					incrementScore(-1)
				end
				else if (bx > wr) do
					do
						sound!tonetimeval20(0xEE, 0x64, tone_duration)
						sound!tonefreq(0x47, tone2)
					end
					dx = -dx
					bx = 2 * wr - bx
					incrementScore(-1)
				end
				if (by < wt) do
					do
						sound!tonetimeval20(0x75, 0xD8, tone_duration)
						sound!tonefreq(0x1D, tone2)
					end
					dy = -dy
					by = 2 * wt - by
					incrementScore(-1)
				end
				else if (by > wb) do
					do
						game!lostBall_(0xDB)
						game!lostBallval21(0x37, 0xB0)
					end
					do
						req_game!lostBall_(0x18)
						req_game!lostBallval21(0x68, 0x59)
					end
				end
				if (dy > 0) do
					if (by > pady - br and by < pady + br) do
						if (bx > padx - padlen / 2 and bx < padx + padlen / 2) do
							do
								sound!tonetimeval20(0x34, 0x6E, tone_duration)
								sound!tonefreq(0x3A, tone2)
							end
							dy = -dy
							by = 2 * (pady - br) - by
							dx = dx / 4 + (bx - padx) / 4
						end
					end
				end
				var collision : Boolean = collideBrick(bx - br, by - br)or collideBrick(bx + br, by - br)or collideBrick(bx + br, by + br)or collideBrick(bx - br, by + br)
				if (collision) do
					do
						sound!tonefreq(0x65, tone1)
						sound!tonetimeval20(0x2A, 0xF3, tone_duration)
					end
					dy = -dy
					incrementScore(10)
					if (bricksLeft()== 0) do
						do
							game!nextLevel_(0x56)
							game!nextLevelval22(0x98, 0x3B)
						end
						do
							req_game!nextLevel_(0xD5)
							req_game!nextLevelval22(0xCF, 0x85)
						end
					end
				end
				drawBall()
				drawPad()
				do
					ia!updateIAballypadyballxpadxval17(padx, 0x63, bx, pady, 0xE3, by)
					ia!updateIA_(0x83)
				end
				do
					display!update_(0xAE)
					display!updateval12(0x59, 0x63)
				end
				log(false)
				clock!timer_start(0x09, period, 0x7C, 0)
			end
			internal
			event game?lostBall_
			guard not received_game_lostBallval21
			action do
				received_game_lostBall_ = true
			end
			internal
			event game?lostBallval21
			guard not received_game_lostBall_
			action do
				received_game_lostBallval21 = true
			end
			internal
			event game?nextLevel_
			guard not received_game_nextLevelval22
			action do
				received_game_nextLevel_ = true
			end
			internal
			event game?nextLevelval22
			guard not received_game_nextLevel_
			action do
				received_game_nextLevelval22 = true
			end
			internal
			event pro_game?lostBall_
			guard not received_pro_game_lostBallval21
			action do
				received_pro_game_lostBall_ = true
			end
			internal
			event pro_game?lostBallval21
			guard not received_pro_game_lostBall_
			action do
				received_pro_game_lostBallval21 = true
			end
			internal
			event pro_game?nextLevel_
			guard not received_pro_game_nextLevelval22
			action do
				received_pro_game_nextLevel_ = true
			end
			internal
			event pro_game?nextLevelval22
			guard not received_pro_game_nextLevel_
			action do
				received_pro_game_nextLevelval22 = true
			end
			transition -> LOSTBALL
			event game?lostBall_
			guard received_game_lostBallval21
			action do
				clock!timer_cancel(0, 0x0D, 0x45)
				received_game_lostBall_ = false
				received_game_lostBallval21 = false
			end
			transition -> LOSTBALL
			event game?lostBallval21
			guard received_game_lostBall_
			action do
				clock!timer_cancel(0, 0x12, 0x45)
				received_game_lostBallval21 = false
				received_game_lostBall_ = false
			end
			transition -> NEXTLEVEL
			event game?nextLevel_
			guard received_game_nextLevelval22
			action do
				clock!timer_cancel(0, 0x9B, 0x97)
				received_game_nextLevel_ = false
				received_game_nextLevelval22 = false
			end
			transition -> NEXTLEVEL
			event game?nextLevelval22
			guard received_game_nextLevel_
			action do
				clock!timer_cancel(0, 0xF8, 0x97)
				received_game_nextLevelval22 = false
				received_game_nextLevel_ = false
			end
			transition -> LOSTBALL
			event pro_game?lostBall_
			guard received_pro_game_lostBallval21
			action do
				clock!timer_cancel(0, 0xAE, 0x1C)
				received_pro_game_lostBall_ = false
				received_pro_game_lostBallval21 = false
			end
			transition -> LOSTBALL
			event pro_game?lostBallval21
			guard received_pro_game_lostBall_
			action do
				clock!timer_cancel(0, 0xA9, 0x1C)
				received_pro_game_lostBallval21 = false
				received_pro_game_lostBall_ = false
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevel_
			guard received_pro_game_nextLevelval22
			action do
				clock!timer_cancel(0, 0x95, 0xA7)
				received_pro_game_nextLevel_ = false
				received_pro_game_nextLevelval22 = false
			end
			transition -> NEXTLEVEL
			event pro_game?nextLevelval22
			guard received_pro_game_nextLevel_
			action do
				clock!timer_cancel(0, 0xE2, 0xA7)
				received_pro_game_nextLevelval22 = false
				received_pro_game_nextLevel_ = false
			end
		}
		state LOSTBALL {
			on entry do
				clock!timer_start(0x3A, 500, 0x5E, 0)
				lives = lives - 1
				eraseBall()
				erasePad()
				drawLives()
				do
					display!updateval12(0x30, 0x1E)
					display!update_(0xF2)
				end
				log(true)
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0 and lives > 0
			transition -> GAMEOVER
			event t : clock?timer_timeout
			guard t.id == 0 and lives == 0
		}
		state NEXTLEVEL {
			on entry do
				clock!timer_start(0xFD, 1000, 0x8D, 0)
				level = level + 1
				drawLevel()
				eraseBall()
				erasePad()
				if ((level % 2) == 0 and padlen > 5 * SCALE) padlen = padlen - (4 * SCALE)
				if ((level % 2) == 1) dy = (dy * 3) / 2
				drawLives()
				createBricks()
				do
					display!update_(0xAF)
					display!updateval12(0xA8, 0xA7)
				end
			end
			transition -> LAUNCH
			event t : clock?timer_timeout
			guard t.id == 0
		}
		final state GAMEOVER {
			on entry do
				eraseBall()
				erasePad()
				do
					display!setColorbrval4(255, 0x39, 255, 0x96)
					display!setColorg(0x50, 255)
				end
				do
					display!fillRectheightxval7(0x71, 76, 8, 0xFB)
					display!fillRectywidth(142, 0x00, 30)
				end
				do
					display!setColorg(0xB5, fgcolor [1])
					display!setColorbrval4(fgcolor [2], 0x1B, fgcolor [0], 0xF6)
				end
				do
					display!fillRectheightxval7(0x07, 50, 9, 0x34)
					display!fillRectywidth(140, 0xFB, 31)
				end
				do
					display!setBGColorb(0xA8, fgcolor [2])
					display!setBGColorval5rg(0x99, fgcolor [1], fgcolor [0], 0x43)
				end
				do
					display!setColorg(0x50, 209)
					display!setColorbrval4(130, 0x87, 158, 0x5F)
				end
				do
					display!drawIntegervdigitsscaleval8y(0xD0, 6, 40, 0x5C, score, 5)
					display!drawIntegerx(23, 0x30)
				end
				do
					display!drawThingMLval9(0x27, 0x76)
					display!drawThingMLxy(87, 26, 0x77)
				end
				do
					display!updateval12(0x74, 0xE0)
					display!update_(0x33)
				end
				log(true)
				quit()
			end
		}
		internal
		event e : controller?positionval16
		action do
			received_controller_positionval16 = true
			controller_position_val16 = e.val16
			if (received_controller_positionyx) do
				do
					var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
					center = controller_position_x as Int32 * center
					center = center / 200
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
				end
				do
					received_controller_positionval16 = false
					received_controller_positionyx = false
				end
			end
		end
		internal
		event e : controller?positionyx
		action do
			received_controller_positionyx = true
			controller_position_y = e.y
			controller_position_x = e.x
			if (received_controller_positionval16) do
				do
					var center : Int32 = (RIGHT as Int32 - LEFT as Int32 - padlen as Int32)
					center = controller_position_x as Int32 * center
					center = center / 200
					padx = (LEFT as Int32 + center + (RIGHT as Int32 - LEFT as Int32) / 2) as Int16
				end
				do
					received_controller_positionyx = false
					received_controller_positionval16 = false
				end
			end
		end
	}
}
configuration BreakoutBrowser {
	instance game : BreakoutGameBrowser
	instance disp : DisplayBrowser
	instance sound : SoundControllerBrowser
	instance ctrl : VelocityController
	instance timer : TimerJS
	connector game.clock => timer . timer
	connector ctrl.clock => timer . timer
	connector game.display => disp . display
	connector game.sound => sound . sound
	connector game.controller => ctrl . controls
	connector ctrl.ctrl_in => disp . vctrl
}
